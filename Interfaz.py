from tkinter import *
import tkinter as tk
from PIL import ImageTk
from PIL import Image
from tkinter import filedialog
import io
import requests
from io import BytesIO
from tkinter import ttk
import sys
import requests
import json
import pickle
import operator
from operator import itemgetter
import cognitive_face as CF
from PIL import Image, ImageDraw, ImageFont
subscription_key = None
SUBSCRIPTION_KEY = 'a778533b8662469ab9eea29d56a87da8'
BASE_URL = 'https://codigofinal.cognitiveservices.azure.com/face/v1.0/'
CF.BaseUrl.set(BASE_URL)
CF.Key.set(SUBSCRIPTION_KEY)
"""Person class"""
class person():
    """Function that defines the properties of the person class
        Arguments:  iden: Receive an identification number
                    person_id: Receive the person_Id generated by Microsoft Azure
                    name: It receives a name that is entered by the user
                    gender: Receive the gender, that is generated by Microsoft Azure
                    age: Receive the age, that is generated by Microsoft Azure
                    picture: It receives a picture that is entered by the user
                    profession: It receives a profession that is entered by the user"""
    def __init__(self, iden, person_id, name, gender, age, picture, profession):
        self.iden = iden
        self.person_id = person_id
        self.name = name 
        self.gender = gender
        self.age = age
        self.picture = picture
        self.profession = profession
"""Student class
    arguments:  person 
                Inheritance of the person class"""
class student(person):
    """Function that defines the properties of the student class and also inherits the properties of the person class
        Arguments:  Scholarship: Receive the user's response to find out if he is awarded a scholarship
                    Career: Receive the user's response to find out what career they are studying
                    Number_of_credits: Receive the user's response to find out how many credits they have enrolled"""
    def __init__(self, iden, person_id, name, gender, age, picture, profession, scholarship, career, number_of_credits):
        person.__init__(self, iden, person_id, name, gender, age, picture, profession)
        self.scholarship = scholarship
        self.career = career
        self.number_of_credits = number_of_credits
"""Teacher class
    arguments:  person 
                Inheritance of the person class"""
class teacher(person):
    """Function that defines the properties of the teacher class and also inherits the properties of the person class
        Arguments:  Matter: Receive the user's response to know what subject is taught
                    Classroom: Receive the user's response to know in which classroom he teaches
                    Business_days: Receive the user's response to know how many days a week he works"""
    def __init__(self, iden, person_id, name, gender, age, picture, profession, matter, classroom, business_days):
        person.__init__(self, iden, person_id, name, gender, age, picture, profession)
        self.matter = matter
        self.classroom = classroom
        self.business_days = business_days
"""Adminisstrative class
    arguments:  person 
                Inheritance of the person class"""
class Administrative(person):
    """Function that defines the properties of the administrative class and also inherits the properties of the person class
        Arguments:  Where_you_work: Receive the user's response to know where he works
                    Work_position: Receive the user's response to know what job they do
                    Worh_experience: Receive user feedback to find out how much work experience you have"""
    def __init__(self, iden, person_id, name, gender, age, picture, profession, where_you_work, work_position, work_experience):
        person.__init__(self, iden, person_id, name, gender, age, picture, profession)
        self.where_you_work = where_you_work
        self.work_position = work_position
        self.work_experience = work_experience
lista = []
class Ventana(tk.Frame):
    def __init__(self, master=None):
        super(Ventana, self).__init__(master=master)
        Frame.__init__(self, master) #parameters you want to send through the Frame class
        self.master = master
        self.start_menu() #Show menu
        self.label = tk.Label(self, text="Welcome to the most pro facial recognition program in beginner history!")
        self.label.pack(padx=20, pady=20)
    def start_menu(self):
        self.master.title("Super Interface")
        self.pack(fill=BOTH, expand=1)
        #Create the menu instance
        menu = Menu(self.master)
        self.master.config(menu=menu)
        #Create the File object
        archivo = Menu(menu)
        #Add commands to menu option
        #Option exit
        archivo.add_command(label="Exit", command=self.salir)
        menu.add_cascade(label="Archive", menu=archivo)
        #Create the Windows object
        ventanas = Menu(menu)
        menu.add_cascade(label="Options", menu=ventanas)
        ventanas.add_command(label="Create group", command=self.generar_creargrupo)
        ventanas.add_command(label="Create People", command=self.generar_personagrupo)
        consultas = Menu(menu)
        menu.add_cascade(label="Inquiries",menu=consultas)
        consultas.add_cascade(label="Image and personal info", command=self.consulta_1)
        consultas.add_cascade(label="Orden List", command=self.consulta_2)
    def salir(self):
        exit()   
    def generar_creargrupo(self):
        ventana1 = tk.Toplevel()
        ventana1.title("Create Group")
        ventana1.geometry("400x150")
        ventana1.configure(background= "Blue")
        lb_v1 = tk.Label(ventana1, text="Group name: ", bg="black", fg="white")
        lb_v1.grid(column=0, row=0, padx=(20,10))
        tb_v1 = tk.Entry(ventana1, width=40)
        tb_v1.grid(column=1, row=0, pady=5, columnspan=2, padx=(20,10))
        b_salir = tk.Button(ventana1, text = "Exit", command=ventana1.destroy)
        b_salir.grid(column=2, row=2, pady=15)
        lb_v2=tk.Label(ventana1, text="Group id:", bg="black", fg="white")
        lb_v2.grid(column=0, row=1,padx=(20,10))
        tb_v2 = tk.Entry(ventana1, width=40)
        tb_v2.grid(column=1, row=1, pady=5, columnspan=2, padx=(20,10))
        b_crear=tk.Button(ventana1, text="Create group", command=lambda:create_group(tb_v2, tb_v1))
        b_crear.grid(column=1, row=2, pady=15)
    def generar_personagrupo(self):
        ventana2 = tk.Toplevel()
        ventana2.title("Create person")
        ventana2.geometry("425x200")
        ventana2.configure(background="Green")
        v2=tk.Label(ventana2, text="Choose one of these three classes", bg="black", fg="white")
        v2.grid(column=1, row=1, padx=(30,10))
        b_estudiante=tk.Button(ventana2, text="Student", command=self.estudiante)
        b_estudiante.grid(column=0, row=2, padx=(20,10))
        b_profesor=tk.Button(ventana2, text="Professor", command=self.profesor)
        b_profesor.grid(column=1, row=2, padx=(20,10))
        b_administrativo=tk.Button(ventana2, text="Administrative", command=self.administrativo)
        b_administrativo.grid(column=2, row=2, padx=(20,30))
        b_salir=tk.Button(ventana2, text="Exit", command=ventana2.destroy)
        b_salir.grid(column=1, row=3, padx=(20,10))
    def estudiante(self):
        ventana3 = tk.Toplevel()
        ventana3.title("Create student person")
        ventana3.geometry("400x200")
        ventana3.configure(background="Red")
        v1=tk.Label(ventana3, text="Identification:", bg="black", fg="white")
        v1.grid(column=0, row=0, padx=(20,10))
        e1= tk.Entry(ventana3)
        e1.grid(column=1, row=0, padx=(20,10))
        v2=tk.Label(ventana3, text='Name: ', bg="black", fg="white")
        v2.grid(column=0, row=1, padx=(20,10))
        e2= tk.Entry(ventana3)
        e2.grid(column=1, row=1, padx=(20,10))
        v3=tk.Label(ventana3, text="Confirm Profession:", bg="black", fg="white")
        v3.grid(column=0, row=2, padx=(20,10))
        e3= tk.Entry(ventana3)
        e3.grid(column=1, row=2, padx=(20,10))
        v4=tk.Label(ventana3, text="Picture:", bg="black", fg="white")
        v4.grid(column=0, row=3, padx=(20,10))
        e4= tk.Entry(ventana3)
        e4.grid(column=1, row=3, padx=(20,10))
        v5=tk.Label(ventana3, text="Group id:", bg="black", fg="white")
        v5.grid(column=0, row=4, padx=(20,10))
        e5= tk.Entry(ventana3)
        e5.grid(column=1, row=4, padx=(20,10))
        v6=tk.Label(ventana3, text="Scholarship(Yes or No):", bg="black", fg="white")
        v6.grid(column=0, row=5, padx=(20,10))
        e6= tk.Entry(ventana3)
        e6.grid(column=1, row=5, padx=(20,10))
        v7=tk.Label(ventana3, text="Career:", bg="black", fg="white")
        v7.grid(column=0, row=6, padx=(20,10))
        e7= tk.Entry(ventana3)
        e7.grid(column=1, row=6, padx=(20,10))
        v8=tk.Label(ventana3, text="Number of credits:", bg="black", fg="white")
        v8.grid(column=0, row=7, padx=(20,10))
        e8= tk.Entry(ventana3)
        e8.grid(column=1, row=7, padx=(20,10))
        b_crear=tk.Button(ventana3, text="Create Person", command=lambda:create_person(e1, e2, e3, e4, e5, e6, e7, e8))
        b_crear.grid(column=0, row=8, padx=(20,10))
        b_salir=tk.Button(ventana3, text="Exit", command=ventana3.destroy)
        b_salir.grid(column=1, row=8, padx=(20,10))
    def administrativo(self):
        ventana4 = tk.Toplevel()
        ventana4.title("Create administrative person")
        ventana4.geometry("400x200")
        ventana4.configure(background="Pink")
        v1=tk.Label(ventana4, text="Identification:", bg="black", fg="white")
        v1.grid(column=0, row=0, padx=(30,10))
        e1= tk.Entry(ventana4)
        e1.grid(column=1, row=0, padx=(30,10))
        v2=tk.Label(ventana4, text="Name:", bg="black", fg="white")
        v2.grid(column=0, row=1, padx=(30,10))
        e2= tk.Entry(ventana4)
        e2.grid(column=1, row=1, padx=(30,10))
        v3=tk.Label(ventana4, text="Confirm Profession:", bg="black", fg="white")
        v3.grid(column=0, row=2, padx=(30,10))
        e3= tk.Entry(ventana4)
        e3.grid(column=1, row=2, padx=(30,10))
        v4=tk.Label(ventana4, text="Picture:", bg="black", fg="white")
        v4.grid(column=0, row=3, padx=(30,10))
        e4= tk.Entry(ventana4)
        e4.grid(column=1, row=3, padx=(30,10))
        v5=tk.Label(ventana4, text="Group id:", bg="black", fg="white")
        v5.grid(column=0, row=4, padx=(30,10))
        e5= tk.Entry(ventana4)
        e5.grid(column=1, row=4, padx=(30,10))
        v6=tk.Label(ventana4, text="Where you work:", bg="black", fg="white")
        v6.grid(column=0, row=5, padx=(30,10))
        e6= tk.Entry(ventana4)
        e6.grid(column=1, row=5, padx=(30,10))
        v7=tk.Label(ventana4, text="Work position:", bg="black", fg="white")
        v7.grid(column=0, row=6, padx=(30,10))
        e7= tk.Entry(ventana4)
        e7.grid(column=1, row=6, padx=(30,10))
        v8=tk.Label(ventana4, text="Work experience(Years):", bg="black", fg="white")
        v8.grid(column=0, row=7, padx=(30,10))
        e8= tk.Entry(ventana4)
        e8.grid(column=1, row=7, padx=(30,10))
        b_crear=tk.Button(ventana4, text="Create Person", command=lambda:create_person(e1, e2, e3, e4, e5, e6, e7, e8))
        b_crear.grid(column=0, row=8, padx=(30,10))
        b_salir=tk.Button(ventana4, text="Exit", command=ventana4.destroy)
        b_salir.grid(column=1, row=8, padx=(30,10))
    def profesor(self):
        ventana5 = tk.Toplevel()
        ventana5.title("Create Person Teacher")
        ventana5.geometry("400x200")
        ventana5.configure(background="Purple")
        v1=tk.Label(ventana5, text="Identification:", bg="black", fg="white")
        v1.grid(column=0, row=0, padx=(30,10))
        e1= tk.Entry(ventana5)
        e1.grid(column=1, row=0, padx=(30,10))
        v2=tk.Label(ventana5, text="Name:", bg="black", fg="white")
        v2.grid(column=0, row=1, padx=(30,10))
        e2= tk.Entry(ventana5)
        e2.grid(column=1, row=1, padx=(30,10))
        v3=tk.Label(ventana5, text="Confirm Profession:", bg="black", fg="white")
        v3.grid(column=0, row=2, padx=(30,10))
        e3= tk.Entry(ventana5)
        e3.grid(column=1, row=2, padx=(30,10))
        v4=tk.Label(ventana5, text="Picture:", bg="black", fg="white")
        v4.grid(column=0, row=3, padx=(30,10))
        e4= tk.Entry(ventana5)
        e4.grid(column=1, row=3, padx=(30,10))
        v5=tk.Label(ventana5, text="Group id:", bg="black", fg="white")
        v5.grid(column=0, row=4, padx=(30,10))
        e5= tk.Entry(ventana5)
        e5.grid(column=1, row=4, padx=(30,10))
        v6=tk.Label(ventana5, text="Matter:", bg="black", fg="white")
        v6.grid(column=0, row=5, padx=(30,10))
        e6= tk.Entry(ventana5)
        e6.grid(column=1, row=5, padx=(30,10))
        v7=tk.Label(ventana5, text="Classroom(Number):", bg="black", fg="white")
        v7.grid(column=0, row=6, padx=(30,10))
        e7= tk.Entry(ventana5)
        e7.grid(column=1, row=6, padx=(30,10))
        v8=tk.Label(ventana5, text="Business days(Quantity):", bg="black", fg="white")
        v8.grid(column=0, row=7, padx=(30,10))
        e8= tk.Entry(ventana5)
        e8.grid(column=1, row=7, padx=(30,10))
        b_crear=tk.Button(ventana5, text="Create Person", command=lambda:create_person(e1, e2, e3, e4, e5, e6, e7, e8))
        b_crear.grid(column=0, row=8, padx=(30,10))
        b_salir=tk.Button(ventana5, text="Exit", command=ventana5.destroy)
        b_salir.grid(column=1, row=8, padx=(30,10))
    def consulta_1(self):
        ventana6= tk.Toplevel()
        ventana6.title("Query 1")
        ventana6.geometry("350x150")
        ventana6.configure(background="Yellow")
        v1=tk.Label(ventana6, text="Enter the image address:", bg="black", fg="white")
        v1.grid(column=0, row=0, padx=(30,10))
        e1= tk.Entry(ventana6)
        e1.grid(column=1, row=0, padx=(30,10))
        v2=tk.Label(ventana6, text="Enter the Group Id:", bg="black", fg="white")
        v2.grid(column=0, row=1, padx=(30,10))
        e2= tk.Entry(ventana6)
        e2.grid(column=1, row=1, padx=(30,10))
        b_consultar=tk.Button(ventana6, text="Consult", command=lambda:recognize_person(e1, e2))
        b_consultar.grid(column=0, row=2, padx=(30,10))
        b_salir=tk.Button(ventana6, text="Exit", command=ventana6.destroy)
        b_salir.grid(column=1, row=2, padx=(30,10))
    def consulta_2(self):
        global lista
        ventana7= tk.Toplevel()
        ventana7.title("Query 2")
        ventana7.geometry("300x300")
        ventana7.configure(background="Green")
        v1=tk.Label(ventana7, text="There are four ways to view the list\n of people can choose any of the\n 4 options that are presented", bg="black", fg="white")
        v1.pack(padx=5, pady=5, ipadx=5, ipady=5, fill=tk.X)
        """Open the binary file where all the people's information is"""
        archivo = open("C:/Users/Armando/Documents/personas.bin", "rb") 
        archivo.seek(0)
        flag = 0
        """This method extracts the information of the people one by one and is added to a list"""
        while flag == 0:
            try:
                datos = pickle.load(archivo)
                if datos.profession == 'Estudiante' or datos.profession == 'estudiante' or datos.profession == 'Student' or datos.profession == 'student':
                    e1 = {'Id': datos.iden, 'Name': datos.name, 'Person_id': datos.person_id, 'Gender': datos.gender, 'Age': datos.age, 'Profession': datos.profession, 'Picture': datos.picture, 'Scholarship': datos.scholarship, 'Career': datos.career, 'Number_of_credits': datos.number_of_credits}
                    lista.append(e1)
                elif datos.profession == 'Profesor' or datos.profession == 'profesor' or datos.profession == 'Teacher' or datos.profession == 'teacher' or datos.profession == 'Professor' or datos.profession == 'professor':
                    t1 = {'Id': datos.iden, 'Name': datos.name, 'Person_id': datos.person_id, 'Gender': datos.gender, 'Age': datos.age, 'Profession': datos.profession, 'Picture': datos.picture, 'Matter': datos.matter, 'Classroom': datos.classroom, 'Business_days': datos.business_days}
                    lista.append(t1)
                else:
                    if datos.profession == 'Administrative' or datos.profession == 'administrative' or datos.profession == 'Administrativo' or datos.profession == 'administrativo':
                        a1 = {'Id': datos.iden, 'Name': datos.name, 'Person_id': datos.person_id, 'Gender': datos.gender, 'Age': datos.age, 'Profession': datos.profession, 'Picture': datos.picture, 'Where_you_work': datos.where_you_work, 'Work_position': datos.work_position, 'Work_experience': datos.work_experience}
                        lista.append(a1)
            except:
                flag = 1
        archivo.close()
        b_acendentenombre=tk.Button(ventana7, text="Ascending Name (A-Z)", command=orden1)
        b_acendentenombre.pack(side=tk.TOP)
        b_decendentenombre=tk.Button(ventana7, text="Descending Name (Z-A)", command=orden2)
        b_decendentenombre.pack(side=tk.TOP)
        b_acendenteedad=tk.Button(ventana7, text="Ascending Age (Younger to Older)", command=orden3)
        b_acendenteedad.pack(side=tk.TOP)
        b_decendenteedad=tk.Button(ventana7, text="Descending Age (Older to Younger)", command=orden4)
        b_decendenteedad.pack(side=tk.TOP)
        b_salir=tk.Button(ventana7, text="Exit", command=ventana7.destroy)
        b_salir.pack(side=tk.TOP)
"""Create group function
    This function through the functions of Microsoft Azure creates a group of people
    Arguments:  Group_id: The group id is entered by the user and stored in Microsoft Azure as a group of people
                Group_name: The group name is entered by the user and stored in Microsoft Azure as a group of people"""
def create_group(group_id, group_name):
    aux_group_id = int(group_id.get())
    aux_group_name = group_name.get()
    """Cognitive face method to create groups"""
    CF.person_group.create(aux_group_id, aux_group_name)
"""Create people function
    This function through the functions of Microsoft Azure creates a person within a group
    Arguments:  iden: Receive an identification number
                name: It receives a name that is entered by the user
                picture: It receives a picture that is entered by the user
                group_id: User enters group ID to store person in that group
                profession: It receives a profession that is entered by the user
                p1: A characteristic of the affected user of the entered profession
                p2: A characteristic of the affected user of the entered profession
                p3: A characteristic of the affected user of the entered profession"""
def create_person(iden, name, profession, picture, group_id, p1, p2, p3):
    aux_iden = int(iden.get())
    aux_group_id = int(group_id.get())
    aux_name = name.get()
    aux_profession = profession.get()
    aux_picture = picture.get()
    """Cognitive face method to create person"""
    response = CF.person.create(aux_group_id, aux_name, aux_profession) 
    """Extract the person id of the created person"""
    person_id = response['personId'] 
    """Open a file created in the memory of the user's pc"""
    f = open('C:/Users/Armando/Documents/pictures.txt', 'a') 
    """Add the image of the person created to the file that was just created"""
    f.write("\n" + aux_picture) 
    f.close()
    CF.person.add_face(aux_picture, aux_group_id, person_id)
    """ With the method of searching for the characteristics 
        of a person by means of an image that gives the cognitive face, the gender and age of the person are extracted"""
    image_path = aux_picture
    image_data = open(image_path, "rb").read()
    headers = {'Ocp-Apim-Subscription-Key': SUBSCRIPTION_KEY,
    'Content-Type': 'application/octet-stream'}
    params = {
        'returnFaceId': 'true',
        'returnFaceLandmarks': 'false',
        'returnFaceAttributes': 'age,gender,headPose,smile,facialHair,glasses,emotion,hair,makeup,occlusion,accessories,blur,exposure,noise',
    }
    response = requests.post(
                             BASE_URL + "detect/", headers=headers, params=params, data=image_data)
    analysis = response.json() 
    info = analysis[0]
    dic = info['faceAttributes']
    gender = dic['gender']
    age = dic['age']
    """Once having all the properties requested by the student, teacher and administrative classes. 
        We continue to compare the profession to know to which class to add the person and finally 
        to add all the information of the class to a binary file where the information will be stored."""
    if aux_profession == 'Estudiante' or aux_profession == 'estudiante' or aux_profession == 'Student' or aux_profession == 'student':
        aux_p1 = p1.get()
        aux_p2 = p2.get()
        aux_p3 = int(p3.get())
        with open("C:/Users/Armando/Documents/personas.bin", "ab") as f:
            s1 = student(aux_iden, person_id, aux_name, gender, age, aux_picture, aux_profession, aux_p1, aux_p2, aux_p3)
            pickle.dump(s1, f, pickle.HIGHEST_PROTOCOL)
    elif aux_profession == 'Profesor' or aux_profession == 'profesor' or aux_profession == 'Teacher' or aux_profession == 'teacher' or aux_profession == 'Professor' or profession == 'professor':
        aux_p1 = p1.get()
        aux_p2 = int(p2.get())
        aux_p3 = int(p3.get())
        with open("C:/Users/Armando/Documents/personas.bin", "ab") as f:
            t1 = teacher(aux_iden, person_id, aux_name, gender, age, aux_picture, aux_profession, aux_p1, aux_p2, aux_p3)
            pickle.dump(t1, f, pickle.HIGHEST_PROTOCOL)
    elif aux_profession == 'Administrative' or aux_profession == 'administrative' or aux_profession == 'Administrativo' or aux_profession == 'administrativo':
        aux_p1 = p1.get()
        aux_p2 = p2.get()
        aux_p3 = int(p3.get())
        with open("C:/Users/Armando/Documents/personas.bin", "ab") as f:
            a1 = Administrative(aux_iden, person_id, aux_name, gender, age, aux_picture, aux_profession, aux_p1, aux_p2, aux_p3)
            pickle.dump(a1, f, pickle.HIGHEST_PROTOCOL)
"""The recognize person feature displays a person's image with a box on their face showing their name in a corner of the image.
    Arguments:  picture: Path of the image which is entered by the user
                group_id: It is entered by the user to recognize people in the Microsoft Azure"""           
def recognize_person(picture, group_id):
    aux_picture = picture.get()
    aux_group_id = int(group_id.get())
    response = CF.face.detect(aux_picture)
    face_ids = [d['faceId'] for d in response]    
    identified_faces = CF.face.identify(face_ids, aux_group_id)
    personas = identified_faces[0]
    candidates_list = personas['candidates']
    candidates = candidates_list[0]
    person = candidates['personId'] 
    """Create a backup of the person id in a global variable"""
    person_data = CF.person.get(aux_group_id, person)
    person_name = person_data['name']
    response = CF.face.detect(aux_picture)
    dic = response[0]
    faceRectangle = dic['faceRectangle']
    width = faceRectangle['width']
    top = faceRectangle['top']
    height = faceRectangle['height']
    left = faceRectangle['left']
    image=Image.open(aux_picture)
    draw = ImageDraw.Draw(image)
    draw.rectangle((left,top,left + width,top+height), outline='red')
    font = ImageFont.truetype("C:/Users/Armando/Downloads/public_semana-9_Arial_Unicode.ttf", 50)
    draw.text((50, 50), person_name, font=font,  fill="white")
    image.show()
    """Open the binary file where all the people's information is"""
    f = open("C:/Users/Armando/Documents/personas.bin", "rb") 
    f.seek(0)
    flag = 0
    lista = []
    """This method extracts the information of the people one by one and is added to a list"""
    while flag == 0:
        try:
            datos = pickle.load(f)
            if datos.profession == 'Estudiante' or datos.profession == 'estudiante' or datos.profession == 'Student' or datos.profession == 'student':
                e1 = {'Id': datos.iden, 'Name': datos.name, 'Person_id': datos.person_id, 'Gender': datos.gender, 'Age': datos.age, 'Profession': datos.profession, 'Picture': datos.picture, 'Scholarship': datos.scholarship, 'Career': datos.career, 'Number_of_credits': datos.number_of_credits}
                lista.append(e1)
            elif datos.profession == 'Profesor' or datos.profession == 'profesor' or datos.profession == 'Teacher' or datos.profession == 'teacher' or datos.profession == 'Professor' or datos.profession == 'professor':
                t1 = {'Id': datos.iden, 'Name': datos.name, 'Person_id': datos.person_id, 'Gender': datos.gender, 'Age': datos.age, 'Profession': datos.profession, 'Picture': datos.picture, 'Matter': datos.matter, 'Classroom': datos.classroom, 'Business_days': datos.business_days}
                lista.append(t1)
            else:
                if datos.profession == 'Administrative' or datos.profession == 'administrative' or datos.profession == 'Administrativo' or datos.profession == 'administrativo':
                    a1 = {'Id': datos.iden, 'Name': datos.name, 'Person_id': datos.person_id, 'Gender': datos.gender, 'Age': datos.age, 'Profession': datos.profession, 'Picture': datos.picture, 'Where_you_work': datos.where_you_work, 'Work_position': datos.work_position, 'Work_experience': datos.work_experience}
                    lista.append(a1)
        except:
            flag = 1
    f.close()
    """ This method extracts the person id from the list and they are compared with the backup of the 
        person id that is stored in the global variable. 
        If they match the information of that person is shown"""
    while len(lista) > 0:
        x = lista[0]
        y = x['Person_id']
        if y == person:
            ventana11 = tk.Toplevel()
            ventana11.title("Datos")
            ventana11.geometry("500x400")
            lb_Id = tk.Label(ventana11, text="Id: ")
            lb_name = tk.Label(ventana11, text="Name: ")
            lb_person_id = tk.Label(ventana11, text="Person_id: ")
            lb_gender = tk.Label(ventana11, text="Gender: ")
            lb_age = tk.Label(ventana11, text="Age: ")
            lb_profession = tk.Label(ventana11, text="Profession: ")
            lb_picture = tk.Label(ventana11, text="Picture: ")
            sv_Id = tk.StringVar()
            tb_Id = tk.Entry(ventana11, textvariable = sv_Id, width=40)
            sv_name = tk.StringVar()
            tb_name = tk.Entry(ventana11, textvariable = sv_name, width=40)
            sv_person_id = tk.StringVar()
            tb_person_id = tk.Entry(ventana11, textvariable = sv_person_id, width=40)
            sv_gender = tk.StringVar()
            tb_gender = tk.Entry(ventana11, textvariable = sv_gender, width=40)
            sv_age = tk.StringVar()
            tb_age = tk.Entry(ventana11, textvariable = sv_age, width=40)
            sv_profession = tk.StringVar()
            tb_profession = tk.Entry(ventana11, textvariable = sv_profession, width=40)
            sv_picture = tk.StringVar()
            tb_picture = tk.Entry(ventana11, textvariable = sv_picture, width=40)
            b_salir = tk.Button(ventana11, text = "Salir", command=ventana11.destroy)
            lb_Id.grid(column=0, row=0, padx=(20,10))
            lb_name.grid(column=0, row=1, padx=(20,10))
            lb_person_id.grid(column=0, row=2, padx=(20,10))
            lb_gender.grid(column=0, row=3, padx=(20,10))
            lb_age.grid(column=0, row=4, padx=(20,10))
            lb_profession.grid(column=0, row=5, padx=(20,10))
            lb_picture.grid(column=0, row=6, padx=(20,10))
            tb_Id.grid(column=1, row=0, pady=5, columnspan=2, padx=(20,10))
            tb_name.grid(column=1, row=1,  pady=5, columnspan=2, padx=(20,10))
            tb_person_id.grid(column=1, row=2,  pady=5, columnspan=2, padx=(20,10))
            tb_gender.grid(column=1, row=3,  pady=5, columnspan=2, padx=(20,10))
            tb_age.grid(column=1, row=4,  pady=5, columnspan=2, padx=(20,10))
            tb_profession.grid(column=1, row=5,  pady=5, columnspan=2, padx=(20,10))
            tb_picture.grid(column=1, row=6,  pady=5, columnspan=2, padx=(20,10))
            b_salir.grid(column=2, row=10, pady=15)
            dict_persona = lista[0]
            sv_Id.set(dict_persona["Id"])
            sv_name.set(dict_persona["Name"])
            sv_person_id.set(dict_persona["Person_id"])
            sv_gender.set(dict_persona["Gender"])
            sv_age.set(dict_persona["Age"])
            sv_profession.set(dict_persona["Profession"]) 
            sv_picture.set(dict_persona["Picture"])
            aux_tb_profession = tb_profession.get()
            if aux_tb_profession == 'Estudiante' or aux_tb_profession == 'estudiante' or aux_tb_profession == 'Student' or aux_tb_profession == 'student':
                lb_Scholarship = tk.Label(ventana11, text="Scholarship: ")
                lb_Career = tk.Label(ventana11, text="Career: ")
                lb_Number_of_credits = tk.Label(ventana11, text="Number_of_credits: ")
                sv_Scholarship = tk.StringVar()
                tb_Scholarship = tk.Entry(ventana11, textvariable = sv_Scholarship, width=40)
                sv_Career = tk.StringVar()
                tb_Career = tk.Entry(ventana11, textvariable = sv_Career, width=40)
                sv_Number_of_credits = tk.StringVar()
                tb_Number_of_credits = tk.Entry(ventana11, textvariable = sv_Number_of_credits, width=40)
                lb_Scholarship.grid(column=0, row=7, padx=(20,10))
                lb_Career.grid(column=0, row=8, padx=(20,10))
                lb_Number_of_credits.grid(column=0, row=9, padx=(20,10))
                tb_Scholarship.grid(column=1, row=7, pady=5, columnspan=2, padx=(20,10))  
                tb_Career.grid(column=1, row=8, pady=5, columnspan=2, padx=(20,10)) 
                tb_Number_of_credits.grid(column=1, row=9, pady=5, columnspan=2, padx=(20,10)) 
                dict_persona = lista[0]
                sv_Scholarship.set(dict_persona["Scholarship"])
                sv_Career.set(dict_persona["Career"])
                sv_Number_of_credits.set(dict_persona["Number_of_credits"])
            elif aux_tb_profession == 'Profesor' or aux_tb_profession == 'profesor' or aux_tb_profession == 'Teacher' or aux_tb_profession == 'teacher' or aux_tb_profession == 'Professor' or aux_tb_profession == 'professor':
                lb_Matter = tk.Label(ventana11, text="Matter: ")
                lb_Classroom = tk.Label(ventana11, text="Classroom: ")
                lb_Business_days = tk.Label(ventana11, text="Business_days: ")
                sv_Matter = tk.StringVar()
                tb_Matter = tk.Entry(ventana11, textvariable = sv_Matter, width=40)
                sv_Classroom = tk.StringVar()
                tb_Classroom = tk.Entry(ventana11, textvariable = sv_Classroom, width=40)
                sv_Business_days = tk.StringVar()
                tb_Business_days = tk.Entry(ventana11, textvariable = sv_Business_days, width=40)
                lb_Matter.grid(column=0, row=7, padx=(20,10))
                lb_Classroom.grid(column=0, row=8, padx=(20,10))
                lb_Business_days.grid(column=0, row=9, padx=(20,10))
                tb_Matter.grid(column=1, row=7, pady=5, columnspan=2, padx=(20,10))  
                tb_Classroom.grid(column=1, row=8, pady=5, columnspan=2, padx=(20,10)) 
                tb_Business_days.grid(column=1, row=9, pady=5, columnspan=2, padx=(20,10)) 
                dict_persona = lista[0]
                sv_Matter.set(dict_persona["Matter"])
                sv_Classroom.set(dict_persona["Classroom"])
                sv_Business_days.set(dict_persona["Business_days"])
            else:
                if aux_tb_profession == 'Administrative' or aux_tb_profession == 'administrative' or aux_tb_profession == 'Administrativo' or aux_tb_profession == 'administrativo':
                    lb_Where_you_work = tk.Label(ventana11, text="Where_you_work: ")
                    lb_Work_position = tk.Label(ventana11, text="Work_position: ")
                    lb_Work_experience = tk.Label(ventana11, text="Work_experience: ")
                    sv_Where_you_work = tk.StringVar()
                    tb_Where_you_work = tk.Entry(ventana11, textvariable = sv_Where_you_work, width=40)
                    sv_Work_position = tk.StringVar()
                    tb_Work_position = tk.Entry(ventana11, textvariable = sv_Work_position, width=40)
                    sv_Work_experience = tk.StringVar()
                    tb_Work_experience = tk.Entry(ventana11, textvariable = sv_Work_experience, width=40)
                    lb_Where_you_work.grid(column=0, row=7, padx=(20,10))
                    lb_Work_position.grid(column=0, row=8, padx=(20,10))
                    lb_Work_experience.grid(column=0, row=9, padx=(20,10))
                    tb_Where_you_work.grid(column=1, row=7, pady=5, columnspan=2, padx=(20,10))  
                    tb_Work_position.grid(column=1, row=8, pady=5, columnspan=2, padx=(20,10)) 
                    tb_Work_experience.grid(column=1, row=9, pady=5, columnspan=2, padx=(20,10)) 
                    dict_persona = lista[0]
                    sv_Where_you_work.set(dict_persona["Where_you_work"])
                    sv_Work_position.set(dict_persona["Work_position"])
                    sv_Work_experience.set(dict_persona["Work_experience"])
            break
        else:
            del lista[0]
registro_actual1 = 0                # Global variable
registro_actual2 = 0                # Global variable
registro_actual3 = 0                # Global variable
registro_actual4 = 0                # Global variable
"""With these functions the list of people is arranged depending on their name and age. 
    In addition, depending on the profession, the different properties of each person will be shown."""
def orden3():
    global lista
    lista = sorted(lista, key=operator.itemgetter("Age"))
    ventana10 = tk.Toplevel()
    ventana10.title("Ascending sorting by age")
    ventana10.geometry("500x400")
    lb_Id = tk.Label(ventana10, text="Id: ")
    lb_name = tk.Label(ventana10, text="Name: ")
    lb_person_id = tk.Label(ventana10, text="Person_id: ")
    lb_gender = tk.Label(ventana10, text="Gender: ")
    lb_age = tk.Label(ventana10, text="Age: ")
    lb_profession = tk.Label(ventana10, text="Profession: ")
    lb_picture = tk.Label(ventana10, text="Picture: ")
    sv_Id = tk.StringVar()
    tb_Id = tk.Entry(ventana10, textvariable = sv_Id, width=40)
    sv_name = tk.StringVar()
    tb_name = tk.Entry(ventana10, textvariable = sv_name, width=40)
    sv_person_id = tk.StringVar()
    tb_person_id = tk.Entry(ventana10, textvariable = sv_person_id, width=40)
    sv_gender = tk.StringVar()
    tb_gender = tk.Entry(ventana10, textvariable = sv_gender, width=40)
    sv_age = tk.StringVar()
    tb_age = tk.Entry(ventana10, textvariable = sv_age, width=40)
    sv_profession = tk.StringVar()
    tb_profession = tk.Entry(ventana10, textvariable = sv_profession, width=40)
    sv_picture = tk.StringVar()
    tb_picture = tk.Entry(ventana10, textvariable = sv_picture, width=40)
    b_salir = tk.Button(ventana10, text = "Exit", command=ventana10.destroy)
    b_siguiente = tk.Button(ventana10, text = "Next", command=lambda:siguiente_orden3(ventana10))
    b_anterior = tk.Button(ventana10, text = "back", command=lambda:anterior_orden3(ventana10))
    lb_Id.grid(column=0, row=0, padx=(20,10))
    lb_name.grid(column=0, row=1, padx=(20,10))
    lb_person_id.grid(column=0, row=2, padx=(20,10))
    lb_gender.grid(column=0, row=3, padx=(20,10))
    lb_age.grid(column=0, row=4, padx=(20,10))
    lb_profession.grid(column=0, row=5, padx=(20,10))
    lb_picture.grid(column=0, row=6, padx=(20,10))
    tb_Id.grid(column=1, row=0, pady=5, columnspan=2, padx=(20,10))
    tb_name.grid(column=1, row=1,  pady=5, columnspan=2, padx=(20,10))
    tb_person_id.grid(column=1, row=2,  pady=5, columnspan=2, padx=(20,10))
    tb_gender.grid(column=1, row=3,  pady=5, columnspan=2, padx=(20,10))
    tb_age.grid(column=1, row=4,  pady=5, columnspan=2, padx=(20,10))
    tb_profession.grid(column=1, row=5,  pady=5, columnspan=2, padx=(20,10))
    tb_picture.grid(column=1, row=6,  pady=5, columnspan=2, padx=(20,10))
    b_salir.grid(column=2, row=10, pady=15)
    b_siguiente.grid(column=1, row=10, pady=15)
    b_anterior.grid(column=0, row=10, pady=15)
    dict_persona = lista[registro_actual1]
    sv_Id.set(dict_persona["Id"])
    sv_name.set(dict_persona["Name"])
    sv_person_id.set(dict_persona["Person_id"])
    sv_gender.set(dict_persona["Gender"])
    sv_age.set(dict_persona["Age"])
    sv_profession.set(dict_persona["Profession"]) 
    sv_picture.set(dict_persona["Picture"])
    aux_tb_profession = tb_profession.get()
    if aux_tb_profession == 'Estudiante' or aux_tb_profession == 'estudiante' or aux_tb_profession == 'Student' or aux_tb_profession == 'student':
        lb_Scholarship = tk.Label(ventana10, text="Scholarship: ")
        lb_Career = tk.Label(ventana10, text="Career: ")
        lb_Number_of_credits = tk.Label(ventana10, text="Number_of_credits: ")
        sv_Scholarship = tk.StringVar()
        tb_Scholarship = tk.Entry(ventana10, textvariable = sv_Scholarship, width=40)
        sv_Career = tk.StringVar()
        tb_Career = tk.Entry(ventana10, textvariable = sv_Career, width=40)
        sv_Number_of_credits = tk.StringVar()
        tb_Number_of_credits = tk.Entry(ventana10, textvariable = sv_Number_of_credits, width=40)
        lb_Scholarship.grid(column=0, row=7, padx=(20,10))
        lb_Career.grid(column=0, row=8, padx=(20,10))
        lb_Number_of_credits.grid(column=0, row=9, padx=(20,10))
        tb_Scholarship.grid(column=1, row=7, pady=5, columnspan=2, padx=(20,10))  
        tb_Career.grid(column=1, row=8, pady=5, columnspan=2, padx=(20,10)) 
        tb_Number_of_credits.grid(column=1, row=9, pady=5, columnspan=2, padx=(20,10)) 
        dict_persona = lista[registro_actual1]
        sv_Scholarship.set(dict_persona["Scholarship"])
        sv_Career.set(dict_persona["Career"])
        sv_Number_of_credits.set(dict_persona["Number_of_credits"])
    elif aux_tb_profession == 'Profesor' or aux_tb_profession == 'profesor' or aux_tb_profession == 'Teacher' or aux_tb_profession == 'teacher' or aux_tb_profession == 'Professor' or aux_tb_profession == 'professor':
        lb_Matter = tk.Label(ventana10, text="Matter: ")
        lb_Classroom = tk.Label(ventana10, text="Classroom: ")
        lb_Business_days = tk.Label(ventana10, text="Business_days: ")
        sv_Matter = tk.StringVar()
        tb_Matter = tk.Entry(ventana10, textvariable = sv_Matter, width=40)
        sv_Classroom = tk.StringVar()
        tb_Classroom = tk.Entry(ventana10, textvariable = sv_Classroom, width=40)
        sv_Business_days = tk.StringVar()
        tb_Business_days = tk.Entry(ventana10, textvariable = sv_Business_days, width=40)
        lb_Matter.grid(column=0, row=7, padx=(20,10))
        lb_Classroom.grid(column=0, row=8, padx=(20,10))
        lb_Business_days.grid(column=0, row=9, padx=(20,10))
        tb_Matter.grid(column=1, row=7, pady=5, columnspan=2, padx=(20,10))  
        tb_Classroom.grid(column=1, row=8, pady=5, columnspan=2, padx=(20,10)) 
        tb_Business_days.grid(column=1, row=9, pady=5, columnspan=2, padx=(20,10)) 
        dict_persona = lista[registro_actual1]
        sv_Matter.set(dict_persona["Matter"])
        sv_Classroom.set(dict_persona["Classroom"])
        sv_Business_days.set(dict_persona["Business_days"])
    else:
        if aux_tb_profession == 'Administrative' or aux_tb_profession == 'administrative' or aux_tb_profession == 'Administrativo' or aux_tb_profession == 'administrativo':
            lb_Where_you_work = tk.Label(ventana10, text="Where_you_work: ")
            lb_Work_position = tk.Label(ventana10, text="Work_position: ")
            lb_Work_experience = tk.Label(ventana10, text="Work_experience: ")
            sv_Where_you_work = tk.StringVar()
            tb_Where_you_work = tk.Entry(ventana10, textvariable = sv_Where_you_work, width=40)
            sv_Work_position = tk.StringVar()
            tb_Work_position = tk.Entry(ventana10, textvariable = sv_Work_position, width=40)
            sv_Work_experience = tk.StringVar()
            tb_Work_experience = tk.Entry(ventana10, textvariable = sv_Work_experience, width=40)
            lb_Where_you_work.grid(column=0, row=7, padx=(20,10))
            lb_Work_position.grid(column=0, row=8, padx=(20,10))
            lb_Work_experience.grid(column=0, row=9, padx=(20,10))
            tb_Where_you_work.grid(column=1, row=7, pady=5, columnspan=2, padx=(20,10))  
            tb_Work_position.grid(column=1, row=8, pady=5, columnspan=2, padx=(20,10)) 
            tb_Work_experience.grid(column=1, row=9, pady=5, columnspan=2, padx=(20,10)) 
            dict_persona = lista[registro_actual1]
            sv_Where_you_work.set(dict_persona["Where_you_work"])
            sv_Work_position.set(dict_persona["Work_position"])
            sv_Work_experience.set(dict_persona["Work_experience"])
def orden4():
    global lista
    lista = sorted(lista, key=operator.itemgetter("Age"), reverse=True)
    ventana10 = tk.Toplevel()
    ventana10.title("Descending order by age")
    ventana10.geometry("500x400")
    lb_Id = tk.Label(ventana10, text="Id: ")
    lb_name = tk.Label(ventana10, text="Name: ")
    lb_person_id = tk.Label(ventana10, text="Person_id: ")
    lb_gender = tk.Label(ventana10, text="Gender: ")
    lb_age = tk.Label(ventana10, text="Age: ")
    lb_profession = tk.Label(ventana10, text="Profession: ")
    lb_picture = tk.Label(ventana10, text="Picture: ")
    sv_Id = tk.StringVar()
    tb_Id = tk.Entry(ventana10, textvariable = sv_Id, width=40)
    sv_name = tk.StringVar()
    tb_name = tk.Entry(ventana10, textvariable = sv_name, width=40)
    sv_person_id = tk.StringVar()
    tb_person_id = tk.Entry(ventana10, textvariable = sv_person_id, width=40)
    sv_gender = tk.StringVar()
    tb_gender = tk.Entry(ventana10, textvariable = sv_gender, width=40)
    sv_age = tk.StringVar()
    tb_age = tk.Entry(ventana10, textvariable = sv_age, width=40)
    sv_profession = tk.StringVar()
    tb_profession = tk.Entry(ventana10, textvariable = sv_profession, width=40)
    sv_picture = tk.StringVar()
    tb_picture = tk.Entry(ventana10, textvariable = sv_picture, width=40)
    b_salir = tk.Button(ventana10, text = "Exit", command=ventana10.destroy)
    b_siguiente = tk.Button(ventana10, text = "Next", command=lambda:siguiente_orden4(ventana10))
    b_anterior = tk.Button(ventana10, text = "Back", command=lambda:anterior_orden4(ventana10))
    lb_Id.grid(column=0, row=0, padx=(20,10))
    lb_name.grid(column=0, row=1, padx=(20,10))
    lb_person_id.grid(column=0, row=2, padx=(20,10))
    lb_gender.grid(column=0, row=3, padx=(20,10))
    lb_age.grid(column=0, row=4, padx=(20,10))
    lb_profession.grid(column=0, row=5, padx=(20,10))
    lb_picture.grid(column=0, row=6, padx=(20,10))
    tb_Id.grid(column=1, row=0, pady=5, columnspan=2, padx=(20,10))
    tb_name.grid(column=1, row=1,  pady=5, columnspan=2, padx=(20,10))
    tb_person_id.grid(column=1, row=2,  pady=5, columnspan=2, padx=(20,10))
    tb_gender.grid(column=1, row=3,  pady=5, columnspan=2, padx=(20,10))
    tb_age.grid(column=1, row=4,  pady=5, columnspan=2, padx=(20,10))
    tb_profession.grid(column=1, row=5,  pady=5, columnspan=2, padx=(20,10))
    tb_picture.grid(column=1, row=6,  pady=5, columnspan=2, padx=(20,10))
    b_salir.grid(column=2, row=10, pady=15)
    b_siguiente.grid(column=1, row=10, pady=15)
    b_anterior.grid(column=0, row=10, pady=15)
    dict_persona = lista[registro_actual2]
    sv_Id.set(dict_persona["Id"])
    sv_name.set(dict_persona["Name"])
    sv_person_id.set(dict_persona["Person_id"])
    sv_gender.set(dict_persona["Gender"])
    sv_age.set(dict_persona["Age"])
    sv_profession.set(dict_persona["Profession"]) 
    sv_picture.set(dict_persona["Picture"])
    aux_tb_profession = tb_profession.get()
    if aux_tb_profession == 'Estudiante' or aux_tb_profession == 'estudiante' or aux_tb_profession == 'Student' or aux_tb_profession == 'student':
        lb_Scholarship = tk.Label(ventana10, text="Scholarship: ")
        lb_Career = tk.Label(ventana10, text="Career: ")
        lb_Number_of_credits = tk.Label(ventana10, text="Number_of_credits: ")
        sv_Scholarship = tk.StringVar()
        tb_Scholarship = tk.Entry(ventana10, textvariable = sv_Scholarship, width=40)
        sv_Career = tk.StringVar()
        tb_Career = tk.Entry(ventana10, textvariable = sv_Career, width=40)
        sv_Number_of_credits = tk.StringVar()
        tb_Number_of_credits = tk.Entry(ventana10, textvariable = sv_Number_of_credits, width=40)
        lb_Scholarship.grid(column=0, row=7, padx=(20,10))
        lb_Career.grid(column=0, row=8, padx=(20,10))
        lb_Number_of_credits.grid(column=0, row=9, padx=(20,10))
        tb_Scholarship.grid(column=1, row=7, pady=5, columnspan=2, padx=(20,10))  
        tb_Career.grid(column=1, row=8, pady=5, columnspan=2, padx=(20,10)) 
        tb_Number_of_credits.grid(column=1, row=9, pady=5, columnspan=2, padx=(20,10)) 
        dict_persona = lista[registro_actual2]
        sv_Scholarship.set(dict_persona["Scholarship"])
        sv_Career.set(dict_persona["Career"])
        sv_Number_of_credits.set(dict_persona["Number_of_credits"])
    elif aux_tb_profession == 'Profesor' or aux_tb_profession == 'profesor' or aux_tb_profession == 'Teacher' or aux_tb_profession == 'teacher' or aux_tb_profession == 'Professor' or aux_tb_profession == 'professor':
        lb_Matter = tk.Label(ventana10, text="Matter: ")
        lb_Classroom = tk.Label(ventana10, text="Classroom: ")
        lb_Business_days = tk.Label(ventana10, text="Business_days: ")
        sv_Matter = tk.StringVar()
        tb_Matter = tk.Entry(ventana10, textvariable = sv_Matter, width=40)
        sv_Classroom = tk.StringVar()
        tb_Classroom = tk.Entry(ventana10, textvariable = sv_Classroom, width=40)
        sv_Business_days = tk.StringVar()
        tb_Business_days = tk.Entry(ventana10, textvariable = sv_Business_days, width=40)
        lb_Matter.grid(column=0, row=7, padx=(20,10))
        lb_Classroom.grid(column=0, row=8, padx=(20,10))
        lb_Business_days.grid(column=0, row=9, padx=(20,10))
        tb_Matter.grid(column=1, row=7, pady=5, columnspan=2, padx=(20,10))  
        tb_Classroom.grid(column=1, row=8, pady=5, columnspan=2, padx=(20,10)) 
        tb_Business_days.grid(column=1, row=9, pady=5, columnspan=2, padx=(20,10)) 
        dict_persona = lista[registro_actual2]
        sv_Matter.set(dict_persona["Matter"])
        sv_Classroom.set(dict_persona["Classroom"])
        sv_Business_days.set(dict_persona["Business_days"])
    else:
        if aux_tb_profession == 'Administrative' or aux_tb_profession == 'administrative' or aux_tb_profession == 'Administrativo' or aux_tb_profession == 'administrativo':
            lb_Where_you_work = tk.Label(ventana10, text="Where_you_work: ")
            lb_Work_position = tk.Label(ventana10, text="Work_position: ")
            lb_Work_experience = tk.Label(ventana10, text="Work_experience: ")
            sv_Where_you_work = tk.StringVar()
            tb_Where_you_work = tk.Entry(ventana10, textvariable = sv_Where_you_work, width=40)
            sv_Work_position = tk.StringVar()
            tb_Work_position = tk.Entry(ventana10, textvariable = sv_Work_position, width=40)
            sv_Work_experience = tk.StringVar()
            tb_Work_experience = tk.Entry(ventana10, textvariable = sv_Work_experience, width=40)
            lb_Where_you_work.grid(column=0, row=7, padx=(20,10))
            lb_Work_position.grid(column=0, row=8, padx=(20,10))
            lb_Work_experience.grid(column=0, row=9, padx=(20,10))
            tb_Where_you_work.grid(column=1, row=7, pady=5, columnspan=2, padx=(20,10))  
            tb_Work_position.grid(column=1, row=8, pady=5, columnspan=2, padx=(20,10)) 
            tb_Work_experience.grid(column=1, row=9, pady=5, columnspan=2, padx=(20,10)) 
            dict_persona = lista[registro_actual2]
            sv_Where_you_work.set(dict_persona["Where_you_work"])
            sv_Work_position.set(dict_persona["Work_position"])
            sv_Work_experience.set(dict_persona["Work_experience"])
def orden1():
    global lista
    lista =sorted(lista, key=operator.itemgetter("Name"))
    ventana10 = tk.Toplevel()
    ventana10.title("Sorting up by name")
    ventana10.geometry("500x400")
    lb_Id = tk.Label(ventana10, text="Id: ")
    lb_name = tk.Label(ventana10, text="Name: ")
    lb_person_id = tk.Label(ventana10, text="Person_id: ")
    lb_gender = tk.Label(ventana10, text="Gender: ")
    lb_age = tk.Label(ventana10, text="Age: ")
    lb_profession = tk.Label(ventana10, text="Profession: ")
    lb_picture = tk.Label(ventana10, text="Picture: ")
    sv_Id = tk.StringVar()
    tb_Id = tk.Entry(ventana10, textvariable = sv_Id, width=40)
    sv_name = tk.StringVar()
    tb_name = tk.Entry(ventana10, textvariable = sv_name, width=40)
    sv_person_id = tk.StringVar()
    tb_person_id = tk.Entry(ventana10, textvariable = sv_person_id, width=40)
    sv_gender = tk.StringVar()
    tb_gender = tk.Entry(ventana10, textvariable = sv_gender, width=40)
    sv_age = tk.StringVar()
    tb_age = tk.Entry(ventana10, textvariable = sv_age, width=40)
    sv_profession = tk.StringVar()
    tb_profession = tk.Entry(ventana10, textvariable = sv_profession, width=40)
    sv_picture = tk.StringVar()
    tb_picture = tk.Entry(ventana10, textvariable = sv_picture, width=40)
    b_salir = tk.Button(ventana10, text = "Exit", command=ventana10.destroy)
    b_siguiente = tk.Button(ventana10, text = "Next", command=lambda:siguiente_orden1(ventana10))
    b_anterior = tk.Button(ventana10, text = "Back", command=lambda:anterior_orden1(ventana10))
    lb_Id.grid(column=0, row=0, padx=(20,10))
    lb_name.grid(column=0, row=1, padx=(20,10))
    lb_person_id.grid(column=0, row=2, padx=(20,10))
    lb_gender.grid(column=0, row=3, padx=(20,10))
    lb_age.grid(column=0, row=4, padx=(20,10))
    lb_profession.grid(column=0, row=5, padx=(20,10))
    lb_picture.grid(column=0, row=6, padx=(20,10))
    tb_Id.grid(column=1, row=0, pady=5, columnspan=2, padx=(20,10))
    tb_name.grid(column=1, row=1,  pady=5, columnspan=2, padx=(20,10))
    tb_person_id.grid(column=1, row=2,  pady=5, columnspan=2, padx=(20,10))
    tb_gender.grid(column=1, row=3,  pady=5, columnspan=2, padx=(20,10))
    tb_age.grid(column=1, row=4,  pady=5, columnspan=2, padx=(20,10))
    tb_profession.grid(column=1, row=5,  pady=5, columnspan=2, padx=(20,10))
    tb_picture.grid(column=1, row=6,  pady=5, columnspan=2, padx=(20,10))
    b_salir.grid(column=2, row=10, pady=15)
    b_siguiente.grid(column=1, row=10, pady=15)
    b_anterior.grid(column=0, row=10, pady=15)
    dict_persona = lista[registro_actual3]
    sv_Id.set(dict_persona["Id"])
    sv_name.set(dict_persona["Name"])
    sv_person_id.set(dict_persona["Person_id"])
    sv_gender.set(dict_persona["Gender"])
    sv_age.set(dict_persona["Age"])
    sv_profession.set(dict_persona["Profession"]) 
    sv_picture.set(dict_persona["Picture"])
    aux_tb_profession = tb_profession.get()
    if aux_tb_profession == 'Estudiante' or aux_tb_profession == 'estudiante' or aux_tb_profession == 'Student' or aux_tb_profession == 'student':
        lb_Scholarship = tk.Label(ventana10, text="Scholarship: ")
        lb_Career = tk.Label(ventana10, text="Career: ")
        lb_Number_of_credits = tk.Label(ventana10, text="Number_of_credits: ")
        sv_Scholarship = tk.StringVar()
        tb_Scholarship = tk.Entry(ventana10, textvariable = sv_Scholarship, width=40)
        sv_Career = tk.StringVar()
        tb_Career = tk.Entry(ventana10, textvariable = sv_Career, width=40)
        sv_Number_of_credits = tk.StringVar()
        tb_Number_of_credits = tk.Entry(ventana10, textvariable = sv_Number_of_credits, width=40)
        lb_Scholarship.grid(column=0, row=7, padx=(20,10))
        lb_Career.grid(column=0, row=8, padx=(20,10))
        lb_Number_of_credits.grid(column=0, row=9, padx=(20,10))
        tb_Scholarship.grid(column=1, row=7, pady=5, columnspan=2, padx=(20,10))  
        tb_Career.grid(column=1, row=8, pady=5, columnspan=2, padx=(20,10)) 
        tb_Number_of_credits.grid(column=1, row=9, pady=5, columnspan=2, padx=(20,10)) 
        dict_persona = lista[registro_actual3]
        sv_Scholarship.set(dict_persona["Scholarship"])
        sv_Career.set(dict_persona["Career"])
        sv_Number_of_credits.set(dict_persona["Number_of_credits"])
    elif aux_tb_profession == 'Profesor' or aux_tb_profession == 'profesor' or aux_tb_profession == 'Teacher' or aux_tb_profession == 'teacher' or aux_tb_profession == 'Professor' or aux_tb_profession == 'professor':
        lb_Matter = tk.Label(ventana10, text="Matter: ")
        lb_Classroom = tk.Label(ventana10, text="Classroom: ")
        lb_Business_days = tk.Label(ventana10, text="Business_days: ")
        sv_Matter = tk.StringVar()
        tb_Matter = tk.Entry(ventana10, textvariable = sv_Matter, width=40)
        sv_Classroom = tk.StringVar()
        tb_Classroom = tk.Entry(ventana10, textvariable = sv_Classroom, width=40)
        sv_Business_days = tk.StringVar()
        tb_Business_days = tk.Entry(ventana10, textvariable = sv_Business_days, width=40)
        lb_Matter.grid(column=0, row=7, padx=(20,10))
        lb_Classroom.grid(column=0, row=8, padx=(20,10))
        lb_Business_days.grid(column=0, row=9, padx=(20,10))
        tb_Matter.grid(column=1, row=7, pady=5, columnspan=2, padx=(20,10))  
        tb_Classroom.grid(column=1, row=8, pady=5, columnspan=2, padx=(20,10)) 
        tb_Business_days.grid(column=1, row=9, pady=5, columnspan=2, padx=(20,10)) 
        dict_persona = lista[registro_actual3]
        sv_Matter.set(dict_persona["Matter"])
        sv_Classroom.set(dict_persona["Classroom"])
        sv_Business_days.set(dict_persona["Business_days"])
    else:
        if aux_tb_profession == 'Administrative' or aux_tb_profession == 'administrative' or aux_tb_profession == 'Administrativo' or aux_tb_profession == 'administrativo':
            lb_Where_you_work = tk.Label(ventana10, text="Where_you_work: ")
            lb_Work_position = tk.Label(ventana10, text="Work_position: ")
            lb_Work_experience = tk.Label(ventana10, text="Work_experience: ")
            sv_Where_you_work = tk.StringVar()
            tb_Where_you_work = tk.Entry(ventana10, textvariable = sv_Where_you_work, width=40)
            sv_Work_position = tk.StringVar()
            tb_Work_position = tk.Entry(ventana10, textvariable = sv_Work_position, width=40)
            sv_Work_experience = tk.StringVar()
            tb_Work_experience = tk.Entry(ventana10, textvariable = sv_Work_experience, width=40)
            lb_Where_you_work.grid(column=0, row=7, padx=(20,10))
            lb_Work_position.grid(column=0, row=8, padx=(20,10))
            lb_Work_experience.grid(column=0, row=9, padx=(20,10))
            tb_Where_you_work.grid(column=1, row=7, pady=5, columnspan=2, padx=(20,10))  
            tb_Work_position.grid(column=1, row=8, pady=5, columnspan=2, padx=(20,10)) 
            tb_Work_experience.grid(column=1, row=9, pady=5, columnspan=2, padx=(20,10)) 
            dict_persona = lista[registro_actual3]
            sv_Where_you_work.set(dict_persona["Where_you_work"])
            sv_Work_position.set(dict_persona["Work_position"])
            sv_Work_experience.set(dict_persona["Work_experience"])
def orden2():
    global lista
    lista =sorted(lista, key=operator.itemgetter("Name"), reverse=True)        
    ventana10 = tk.Toplevel()
    ventana10.title("Descending order by name")
    ventana10.geometry("500x400")
    lb_Id = tk.Label(ventana10, text="Id: ")
    lb_name = tk.Label(ventana10, text="Name: ")
    lb_person_id = tk.Label(ventana10, text="Person_id: ")
    lb_gender = tk.Label(ventana10, text="Gender: ")
    lb_age = tk.Label(ventana10, text="Age: ")
    lb_profession = tk.Label(ventana10, text="Profession: ")
    lb_picture = tk.Label(ventana10, text="Picture: ")
    sv_Id = tk.StringVar()
    tb_Id = tk.Entry(ventana10, textvariable = sv_Id, width=40)
    sv_name = tk.StringVar()
    tb_name = tk.Entry(ventana10, textvariable = sv_name, width=40)
    sv_person_id = tk.StringVar()
    tb_person_id = tk.Entry(ventana10, textvariable = sv_person_id, width=40)
    sv_gender = tk.StringVar()
    tb_gender = tk.Entry(ventana10, textvariable = sv_gender, width=40)
    sv_age = tk.StringVar()
    tb_age = tk.Entry(ventana10, textvariable = sv_age, width=40)
    sv_profession = tk.StringVar()
    tb_profession = tk.Entry(ventana10, textvariable = sv_profession, width=40)
    sv_picture = tk.StringVar()
    tb_picture = tk.Entry(ventana10, textvariable = sv_picture, width=40)
    b_salir = tk.Button(ventana10, text = "Exit", command=ventana10.destroy)
    b_siguiente = tk.Button(ventana10, text = "Next", command=lambda:siguiente_orden2(ventana10))
    b_anterior = tk.Button(ventana10, text = "Back", command=lambda:anterior_orden2(ventana10))
    lb_Id.grid(column=0, row=0, padx=(20,10))
    lb_name.grid(column=0, row=1, padx=(20,10))
    lb_person_id.grid(column=0, row=2, padx=(20,10))
    lb_gender.grid(column=0, row=3, padx=(20,10))
    lb_age.grid(column=0, row=4, padx=(20,10))
    lb_profession.grid(column=0, row=5, padx=(20,10))
    lb_picture.grid(column=0, row=6, padx=(20,10))
    tb_Id.grid(column=1, row=0, pady=5, columnspan=2, padx=(20,10))
    tb_name.grid(column=1, row=1,  pady=5, columnspan=2, padx=(20,10))
    tb_person_id.grid(column=1, row=2,  pady=5, columnspan=2, padx=(20,10))
    tb_gender.grid(column=1, row=3,  pady=5, columnspan=2, padx=(20,10))
    tb_age.grid(column=1, row=4,  pady=5, columnspan=2, padx=(20,10))
    tb_profession.grid(column=1, row=5,  pady=5, columnspan=2, padx=(20,10))
    tb_picture.grid(column=1, row=6,  pady=5, columnspan=2, padx=(20,10))
    b_salir.grid(column=2, row=10, pady=15)
    b_siguiente.grid(column=1, row=10, pady=15)
    b_anterior.grid(column=0, row=10, pady=15)
    dict_persona = lista[registro_actual4]
    sv_Id.set(dict_persona["Id"])
    sv_name.set(dict_persona["Name"])
    sv_person_id.set(dict_persona["Person_id"])
    sv_gender.set(dict_persona["Gender"])
    sv_age.set(dict_persona["Age"])
    sv_profession.set(dict_persona["Profession"]) 
    sv_picture.set(dict_persona["Picture"])
    aux_tb_profession = tb_profession.get()
    if aux_tb_profession == 'Estudiante' or aux_tb_profession == 'estudiante' or aux_tb_profession == 'Student' or aux_tb_profession == 'student':
        lb_Scholarship = tk.Label(ventana10, text="Scholarship: ")
        lb_Career = tk.Label(ventana10, text="Career: ")
        lb_Number_of_credits = tk.Label(ventana10, text="Number_of_credits: ")
        sv_Scholarship = tk.StringVar()
        tb_Scholarship = tk.Entry(ventana10, textvariable = sv_Scholarship, width=40)
        sv_Career = tk.StringVar()
        tb_Career = tk.Entry(ventana10, textvariable = sv_Career, width=40)
        sv_Number_of_credits = tk.StringVar()
        tb_Number_of_credits = tk.Entry(ventana10, textvariable = sv_Number_of_credits, width=40)
        lb_Scholarship.grid(column=0, row=7, padx=(20,10))
        lb_Career.grid(column=0, row=8, padx=(20,10))
        lb_Number_of_credits.grid(column=0, row=9, padx=(20,10))
        tb_Scholarship.grid(column=1, row=7, pady=5, columnspan=2, padx=(20,10))  
        tb_Career.grid(column=1, row=8, pady=5, columnspan=2, padx=(20,10)) 
        tb_Number_of_credits.grid(column=1, row=9, pady=5, columnspan=2, padx=(20,10)) 
        dict_persona = lista[registro_actual4]
        sv_Scholarship.set(dict_persona["Scholarship"])
        sv_Career.set(dict_persona["Career"])
        sv_Number_of_credits.set(dict_persona["Number_of_credits"])
    elif aux_tb_profession == 'Profesor' or aux_tb_profession == 'profesor' or aux_tb_profession == 'Teacher' or aux_tb_profession == 'teacher' or aux_tb_profession == 'Professor' or aux_tb_profession == 'professor':
        lb_Matter = tk.Label(ventana10, text="Matter: ")
        lb_Classroom = tk.Label(ventana10, text="Classroom: ")
        lb_Business_days = tk.Label(ventana10, text="Business_days: ")
        sv_Matter = tk.StringVar()
        tb_Matter = tk.Entry(ventana10, textvariable = sv_Matter, width=40)
        sv_Classroom = tk.StringVar()
        tb_Classroom = tk.Entry(ventana10, textvariable = sv_Classroom, width=40)
        sv_Business_days = tk.StringVar()
        tb_Business_days = tk.Entry(ventana10, textvariable = sv_Business_days, width=40)
        lb_Matter.grid(column=0, row=7, padx=(20,10))
        lb_Classroom.grid(column=0, row=8, padx=(20,10))
        lb_Business_days.grid(column=0, row=9, padx=(20,10))
        tb_Matter.grid(column=1, row=7, pady=5, columnspan=2, padx=(20,10))  
        tb_Classroom.grid(column=1, row=8, pady=5, columnspan=2, padx=(20,10)) 
        tb_Business_days.grid(column=1, row=9, pady=5, columnspan=2, padx=(20,10)) 
        dict_persona = lista[registro_actual4]
        sv_Matter.set(dict_persona["Matter"])
        sv_Classroom.set(dict_persona["Classroom"])
        sv_Business_days.set(dict_persona["Business_days"])
    else:
        if aux_tb_profession == 'Administrative' or aux_tb_profession == 'administrative' or aux_tb_profession == 'Administrativo' or aux_tb_profession == 'administrativo':
            lb_Where_you_work = tk.Label(ventana10, text="Where_you_work: ")
            lb_Work_position = tk.Label(ventana10, text="Work_position: ")
            lb_Work_experience = tk.Label(ventana10, text="Work_experience: ")
            sv_Where_you_work = tk.StringVar()
            tb_Where_you_work = tk.Entry(ventana10, textvariable = sv_Where_you_work, width=40)
            sv_Work_position = tk.StringVar()
            tb_Work_position = tk.Entry(ventana10, textvariable = sv_Work_position, width=40)
            sv_Work_experience = tk.StringVar()
            tb_Work_experience = tk.Entry(ventana10, textvariable = sv_Work_experience, width=40)
            lb_Where_you_work.grid(column=0, row=7, padx=(20,10))
            lb_Work_position.grid(column=0, row=8, padx=(20,10))
            lb_Work_experience.grid(column=0, row=9, padx=(20,10))
            tb_Where_you_work.grid(column=1, row=7, pady=5, columnspan=2, padx=(20,10))  
            tb_Work_position.grid(column=1, row=8, pady=5, columnspan=2, padx=(20,10)) 
            tb_Work_experience.grid(column=1, row=9, pady=5, columnspan=2, padx=(20,10)) 
            dict_persona = lista[registro_actual4]
            sv_Where_you_work.set(dict_persona["Where_you_work"])
            sv_Work_position.set(dict_persona["Work_position"])
            sv_Work_experience.set(dict_persona["Work_experience"])  
"""These functions scroll the list of people. Depending on the profession, the function used will be."""
def siguiente_orden1(ventana):
    global registro_actual3
    registro_actual3 += 1
    ventana.destroy()
    orden1()
def anterior_orden1(ventana):
    global registro_actual3
    registro_actual3 -= 1
    ventana.destroy()
    orden1()
def siguiente_orden2(ventana):
    global registro_actual4
    registro_actual4 += 1
    ventana.destroy()
    orden2()
def anterior_orden2(ventana):
    global registro_actual4
    registro_actual4 -=1
    ventana.destroy()
    orden2()
def siguiente_orden3(ventana):
    global registro_actual1
    registro_actual1 += 1
    ventana.destroy()
    orden3()
def anterior_orden3(ventana):
    global registro_actual1
    registro_actual1 -=1
    ventana.destroy()
    orden3()
def siguiente_orden4(ventana):
    global registro_actual2
    registro_actual2 += 1
    ventana.destroy()
    orden4()
def anterior_orden4(ventana):
    global registro_actual2
    registro_actual2 -= 1
    ventana.destroy()
    orden4()
if __name__=="__main__":
    root = tk.Tk()
    root.geometry("500x300")
    main = Ventana(root)
    main.pack(fill="both", expand=True)
root.mainloop()
tk.mainloop()
#C:\Users\Armando\Pictures\armando.jpeg
#C:\Users\Armando\Pictures\Imagen2.jpg