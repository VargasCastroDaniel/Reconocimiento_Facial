import sys
import requests
import json
import pickle
import operator
from operator import itemgetter
import cognitive_face as CF
from PIL import Image, ImageDraw, ImageFont

subscription_key = None

SUBSCRIPTION_KEY = 'a778533b8662469ab9eea29d56a87da8'
BASE_URL = 'https://codigofinal.cognitiveservices.azure.com/face/v1.0/'
CF.BaseUrl.set(BASE_URL)
CF.Key.set(SUBSCRIPTION_KEY)

"""Person class"""
class person():
    """Function that defines the properties of the person class
        Arguments:  iden: Receive an identification number
                    person_id: Receive the person_Id generated by Microsoft Azure
                    name: It receives a name that is entered by the user
                    gender: Receive the gender, that is generated by Microsoft Azure
                    age: Receive the age, that is generated by Microsoft Azure
                    picture: It receives a picture that is entered by the user
                    profession: It receives a profession that is entered by the user"""
    def __init__(self, iden, person_id, name, gender, age, picture, profession):
        self.iden = iden
        self.person_id = person_id
        self.name = name 
        self.gender = gender
        self.age = age
        self.picture = picture
        self.profession = profession

"""Student class
    arguments:  person 
                Inheritance of the person class"""
class student(person):
    """Function that defines the properties of the student class and also inherits the properties of the person class
        Arguments:  Scholarship: Receive the user's response to find out if he is awarded a scholarship
                    Career: Receive the user's response to find out what career they are studying
                    Number_of_credits: Receive the user's response to find out how many credits they have enrolled"""
    def __init__(self, iden, person_id, name, gender, age, picture, profession, scholarship, career, number_of_credits):
        person.__init__(self, iden, person_id, name, gender, age, picture, profession)
        self.scholarship = scholarship
        self.career = career
        self.number_of_credits = number_of_credits

"""Teacher class
    arguments:  person 
                Inheritance of the person class"""
class teacher(person):
    """Function that defines the properties of the teacher class and also inherits the properties of the person class
        Arguments:  Matter: Receive the user's response to know what subject is taught
                    Classroom: Receive the user's response to know in which classroom he teaches
                    Business_days: Receive the user's response to know how many days a week he works"""
    def __init__(self, iden, person_id, name, gender, age, picture, profession, matter, classroom, business_days):
        person.__init__(self, iden, person_id, name, gender, age, picture, profession)
        self.matter = matter
        self.classroom = classroom
        self.business_days = business_days

"""Adminisstrative class
    arguments:  person 
                Inheritance of the person class"""
class Administrative(person):
    """Function that defines the properties of the administrative class and also inherits the properties of the person class
        Arguments:  Where_you_work: Receive the user's response to know where he works
                    Work_position: Receive the user's response to know what job they do
                    Worh_experience: Receive user feedback to find out how much work experience you have"""
    def __init__(self, iden, person_id, name, gender, age, picture, profession, where_you_work, work_position, work_experience):
        person.__init__(self, iden, person_id, name, gender, age, picture, profession)
        self.where_you_work = where_you_work
        self.work_position = work_position
        self.work_experience = work_experience

"""Create group function
    This function through the functions of Microsoft Azure creates a group of people
    Arguments:  Group_id: The group id is entered by the user and stored in Microsoft Azure as a group of people
                Group_name: The group name is entered by the user and stored in Microsoft Azure as a group of people"""
def create_group(group_id, group_name):
    """Cognitive face method to create groups"""
    CF.person_group.create(group_id, group_name) 
    print("Group created")

"""Create people function
    This function through the functions of Microsoft Azure creates a person within a group
    Arguments:  iden: Receive an identification number
                name: It receives a name that is entered by the user
                picture: It receives a picture that is entered by the user
                group_id: User enters group ID to store person in that group
                profession: It receives a profession that is entered by the user
                p1: A characteristic of the affected user of the entered profession
                p2: A characteristic of the affected user of the entered profession
                p3: A characteristic of the affected user of the entered profession"""
def create_person(iden, name, profession, picture, group_id, p1, p2, p3):
    """Cognitive face method to create person"""
    response = CF.person.create(group_id, name, profession) 
    """Extract the person id of the created person"""
    person_id = response['personId'] 
    """Open a file created in the memory of the user's pc"""
    f = open('C:/Users/Armando/Documents/pictures.txt', 'a') 
    """Add the image of the person created to the file that was just created"""
    f.write("\n" + picture) 
    f.close()
    CF.person.add_face(picture, group_id, person_id)
    CF.person_group.train(group_id)
    response = CF.person_group.get_status(group_id)
    status = response['status']

    print("Created person", status)
    """ With the method of searching for the characteristics 
        of a person by means of an image that gives the cognitive face, the gender and age of the person are extracted"""

    image_path = picture
    image_data = open(image_path, "rb").read()
    headers = {'Ocp-Apim-Subscription-Key': SUBSCRIPTION_KEY,
    'Content-Type': 'application/octet-stream'}
    params = {
        'returnFaceId': 'true',
        'returnFaceLandmarks': 'false',
        'returnFaceAttributes': 'age,gender,headPose,smile,facialHair,glasses,emotion,hair,makeup,occlusion,accessories,blur,exposure,noise',
    }
    response = requests.post(
                             BASE_URL + "detect/", headers=headers, params=params, data=image_data)
    analysis = response.json() 
    info = analysis[0]
    dic = info['faceAttributes']
    gender = dic['gender']
    age = dic['age']

    """Once having all the properties requested by the student, teacher and administrative classes. 
        We continue to compare the profession to know to which class to add the person and finally 
        to add all the information of the class to a binary file where the information will be stored."""

    if profession == 'Estudiante' or profession == 'estudiante' or profession == 'Student' or profession == 'student':
        with open("C:/Users/Armando/Documents/personas.bin", "ab") as f:
            s1 = student(iden, person_id, name, gender, age, picture, profession, p1, p2, p3)
            pickle.dump(s1, f, pickle.HIGHEST_PROTOCOL)
    elif profession == 'Profesor' or profession == 'profesor' or profession == 'Teacher' or profession == 'teacher' or profession == 'Professor' or profession == 'professor':
        with open("C:/Users/Armando/Documents/personas.bin", "ab") as f:
            t1 = teacher(iden, person_id, name, gender, age, picture, profession, p1, p2, p3)
            pickle.dump(t1, f, pickle.HIGHEST_PROTOCOL)
    elif profession == 'Administrative' or profession == 'administrative' or profession == 'Administrativo' or profession == 'administrativo':
        with open("C:/Users/Armando/Documents/personas.bin", "ab") as f:
            a1 = Administrative(iden, person_id, name, gender, age, picture, profession, p1, p2, p3)
            pickle.dump(a1, f, pickle.HIGHEST_PROTOCOL)
    else:
        print("A profession of this was entered outside the parameters to be added to a group")


"""Function to show the people of a group by order of name and profession
    Arguments: None"""
def print_people():
    print("Enter the group ID:")
    """Receive the id group where people will be searched"""
    group_id = int(input()) 
    print()
    """Congtive face method to show people in a group in a list"""
    lista = CF.person.lists(group_id) 
    if lista == []:
        print("There are no people in the list")
    else:
        print('""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""')
        print("| Order menu:                                                  |")
        print("| Ascending order by name                          -> Scribe 1 |")
        print("| Descending order by name                         -> Scribe 2 |")
        print("| Ascending order by profession                    -> Scribe 3 |")
        print("| Descending order by profession                   -> Scribe 4 |")
        print('""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""\n')
        print("Scribe the option to perform")
        digito = int(input())
        print()
        if digito == 1:
            """Python method that sorts dictionaries by a specific key ascending"""
            print("Order of people by ascending name:\n")
            i = 1
            for x in sorted(lista, key=operator.itemgetter("name")): 
                print(i,"-", x)
                i = i + 1
        elif digito == 2:
            """Python method that sorts dictionaries by a specific key descending"""
            print("Order of people by descending name:\n")
            i = 1
            for x in sorted(lista, key=operator.itemgetter("name"), reverse=True): 
                print(i,"-", x)
                i = i + 1 
        elif digito == 3:
            """Python method that sorts dictionaries by a specific key ascending"""
            print("Order of people by ascending profession:\n")
            i = 1
            for x in sorted(lista, key=operator.itemgetter("userData")): 
                print(i,"-", x)
                i = i + 1
        elif digito == 4:
            """Python method that sorts dictionaries by a specific key descending"""
            print("Order of people by descending profession:\n")
            i = 1
            for x in sorted(lista, key=operator.itemgetter("userData"), reverse=True): 
                print(i,"-", x)
                i = i + 1
        else:
            print("Digit out of range, re-enter digit\n")
            print_people()

"""Function to search for a person by specific name within a group
    Arguments:  name: It receives the name entered by the user which will be searched within a group
                group_id: The user enters the identification of the group where the person's name will be searched"""
def Search_by_name(name, group_id):
    """Congtive face method to show people in a group in a list"""
    lista = CF.person.lists(group_id) 
    lista1 = []
    """The names that are within the group are extracted and compared with the name entered by the user"""
    for x in lista:
        name1 = x["name"]
        lista1.append(name1)
    while len(lista1) > 0:
        if name == lista1[0]:
            print("The person with the name:", name, "If you are in the group")
            break
        else:
            del lista1[0]
            if lista1 == []:
                print("The person with the name:", name, "Is not in the group")
                break

"""Gender function is to sort people's information by gender (male or female)
    Arguments: group_id: It is the id group that the user enters to search for the information of the people"""
def gender(group_id):
    pictures = []
    lista_de_personas = []
    """ The file where the images that were entered are opened in the function of creating people, 
        which are arranged in the same way that people were entered into the group. 
        The file is opened to extract those images in a tuple to use them in the cognitive face method to obtain the gender."""
    with open('C:/Users/Armando/Documents/pictures.txt', 'r') as fi:
        for linea in fi:
            pictures.append(linea.strip())
    del pictures[0]
    for x in pictures:
        picture = x
        response = CF.face.detect(picture)
        face_ids = [d['faceId'] for d in response]
        identified_faces = CF.face.identify(face_ids, group_id)
        personas = identified_faces[0]
        candidates_list = personas['candidates']
        candidates = candidates_list[0]
        person = candidates['personId']
        person_data = CF.person.get(group_id, person)
        image_path = picture
        image_data = open(image_path, "rb").read()
        headers = {'Ocp-Apim-Subscription-Key': SUBSCRIPTION_KEY,
        'Content-Type': 'application/octet-stream'}
        params = {
            'returnFaceId': 'true',
            'returnFaceLandmarks': 'false',
            'returnFaceAttributes': 'age,gender,headPose,smile,facialHair,glasses,emotion,hair,makeup,occlusion,accessories,blur,exposure,noise',
        }
        response = requests.post(
                                    BASE_URL + "detect/", headers=headers, params=params, data=image_data)
        analysis = response.json()
        """ Once all the genres of the people are obtained, they begin to compare to order them by male gender and female gender. 
            To finish, the information of the people according to the gender is shown"""
        y = analysis[0]
        Faceattributes = y['faceAttributes']
        gender = Faceattributes['gender']
        dic = {'gender': gender}
        person_data.update(dic)
        lista_de_personas.append(person_data)
    male = []
    female = []
    while len(lista_de_personas) > 0:
        orden = lista_de_personas[0]
        gender1 = orden['gender']
        if gender1 == 'male':
            male.append(lista_de_personas[0])
            del lista_de_personas[0]
        else:
            female.append(lista_de_personas[0])
            del lista_de_personas[0]
    print('""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""')
    print("| Order menu:                                              |")
    print("| Sort by male gender                          -> Scribe 1 |")
    print("| Sort by female gender                        -> Scribe 2 |")
    print("| All people with their respective gender      -> Scribe 3 |")
    print('""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""')
    t = int(input())
    if t == 1:
        print()
        print("Sort by male gender")
        for x in male:
            print(x)
    elif t == 2:
        print()
        print("Sort by female gender")
        for x in female:
            print(x)
    elif t == 3:
        print()
        print("All people with their respective gender")
        for x in lista_de_personas:
            print(x)
    else:
        print()
        print("Digit out of range")

"""Global variable"""
person_aux = None 
"""The recognize person feature displays a person's image with a box on their face showing their name in a corner of the image.
    Arguments:  picture: Path of the image which is entered by the user
                group_id: It is entered by the user to recognize people in the Microsoft Azure"""           
def recognize_person(picture, group_id):
    response = CF.face.detect(picture)
    face_ids = [d['faceId'] for d in response]    
    identified_faces = CF.face.identify(face_ids, group_id)
    personas = identified_faces[0]
    candidates_list = personas['candidates']
    candidates = candidates_list[0]
    person = candidates['personId']
    global person_aux 
    """Create a backup of the person id in a global variable"""
    person_aux = person 
    person_data = CF.person.get(group_id, person)
    person_name = person_data['name']
    response = CF.face.detect(picture)
    dic = response[0]
    faceRectangle = dic['faceRectangle']
    width = faceRectangle['width']
    top = faceRectangle['top']
    height = faceRectangle['height']
    left = faceRectangle['left']
    image=Image.open(picture)
    draw = ImageDraw.Draw(image)
    draw.rectangle((left,top,left + width,top+height), outline='red')
    font = ImageFont.truetype("C:/Users/Armando/Downloads/public_semana-9_Arial_Unicode.ttf", 50)
    draw.text((50, 50), person_name, font=font,  fill="white")
    image.show()

""" This function comes hand in hand with the function of recognizing people. 
    It shows the information of the person who is recognized by means of the image"""
def recognize_person1():
    """Open the binary file where all the people's information is"""
    f = open("C:/Users/Armando/Documents/personas.bin", "rb") 
    f.seek(0)
    flag = 0
    lista = []
    """This method extracts the information of the people one by one and is added to a list"""
    while flag == 0:
        try:
            datos = pickle.load(f)
            if datos.profession == 'Estudiante' or datos.profession == 'estudiante' or datos.profession == 'Student' or datos.profession == 'student':
                e1 = {'Id': datos.iden, 'Name': datos.name, 'Person_id': datos.person_id, 'Gender': datos.gender, 'Age': datos.age, 'Profession': datos.profession, 'Picture': datos.picture, 'Scholarship': datos.scholarship, 'Career': datos.career, 'Number_of_credits': datos.number_of_credits}
                lista.append(e1)
            elif datos.profession == 'Profesor' or datos.profession == 'profesor' or datos.profession == 'Teacher' or datos.profession == 'teacher' or datos.profession == 'Professor' or datos.profession == 'professor':
                t1 = {'Id': datos.iden, 'Name': datos.name, 'Person_id': datos.person_id, 'Gender': datos.gender, 'Age': datos.age, 'Profession': datos.profession, 'Picture': datos.picture, 'Matter': datos.matter, 'Classroom': datos.classroom, 'Business_days': datos.business_days}
                lista.append(t1)
            else:
                if datos.profession == 'Administrative' or datos.profession == 'administrative' or datos.profession == 'Administrativo' or datos.profession == 'administrativo':
                    a1 = {'Id': datos.iden, 'Name': datos.name, 'Person_id': datos.person_id, 'Gender': datos.gender, 'Age': datos.age, 'Profession': datos.profession, 'Picture': datos.picture, 'Where_you_work': datos.where_you_work, 'Work_position': datos.work_position, 'Work_experience': datos.work_experience}
                    lista.append(a1)
        except:
            flag = 1
    f.close()
    """ This method extracts the person id from the list and they are compared with the backup of the 
        person id that is stored in the global variable. 
        If they match the information of that person is shown"""
    while len(lista) > 0:
        x = lista[0]
        y = x['Person_id']
        if y == person_aux:
            print("This is the information of the person requesting:")
            for x,y in lista[0].items():
                print(x+":",y)
            break
        else:
            del lista[0]

"""History is a variable where the information shown in the attributes function will be stored"""
historial = []

"""The read_file function shows the information of the people stored in the binary file sorted by name and age"""
def read_file():
    """Open the binary file where all the people's information is"""
    f = open("C:/Users/Armando/Documents/personas.bin", "rb") 
    f.seek(0)
    flag = 0
    lista = []
    """This method extracts the information of the people one by one and is added to a list"""
    while flag == 0:
        try:
            datos = pickle.load(f)
            if datos.profession == 'Estudiante' or datos.profession == 'estudiante' or datos.profession == 'Student' or datos.profession == 'student':
                e1 = {'Id': datos.iden, 'Name': datos.name, 'Person_id': datos.person_id, 'Gender': datos.gender, 'Age': datos.age, 'Profession': datos.profession, 'Picture': datos.picture, 'Scholarship': datos.scholarship, 'Career': datos.career, 'Number_of_credits': datos.number_of_credits}
                lista.append(e1)
            elif datos.profession == 'Profesor' or datos.profession == 'profesor' or datos.profession == 'Teacher' or datos.profession == 'teacher' or datos.profession == 'Professor' or datos.profession == 'professor':
                t1 = {'Id': datos.iden, 'Name': datos.name, 'Person_id': datos.person_id, 'Gender': datos.gender, 'Age': datos.age, 'Profession': datos.profession, 'Picture': datos.picture, 'Matter': datos.matter, 'Classroom': datos.classroom, 'Business_days': datos.business_days}
                lista.append(t1)
            else:
                if datos.profession == 'Administrative' or datos.profession == 'administrative' or datos.profession == 'Administrativo' or datos.profession == 'administrativo':
                    a1 = {'Id': datos.iden, 'Name': datos.name, 'Person_id': datos.person_id, 'Gender': datos.gender, 'Age': datos.age, 'Profession': datos.profession, 'Picture': datos.picture, 'Where_you_work': datos.where_you_work, 'Work_position': datos.work_position, 'Work_experience': datos.work_experience}
                    lista.append(a1)
        except:
            flag = 1
    f.close()
    lista_name = []
    lista_age = []
    """ The names are extracted from the list where all the information of the people is and they are added to a list. 
        Same procedure for age."""
    for x in lista:
        age = x['Age']
        name = x['Name']
        lista_name.append(name)
        lista_age.append(age)
    print('""""""""""""""""""""""""""""""""""""""""""""""""""""""""')
    print("| Order menu:                                          |")
    print("| Ascending order by age                   -> Scribe 1 |")
    print("| Descending order by age                  -> Scribe 2 |")
    print("| Ascending order by name                  -> Scribe 3 |")
    print("| Descending order by  name                -> Scribe 4 |")
    print('""""""""""""""""""""""""""""""""""""""""""""""""""""""""\n')
    order = int(input())
    print()
    """By insertion ordering and by python methods the information of all ascending and descending persons is ordered by name and age"""
    if order == 1:
        lista = sorted(lista, key=operator.itemgetter("Age"))
        resultado=[]
        while len(lista_age) > 0:
            mayor = max(lista_age)
            resultado.insert(0,mayor)
            lista_age.remove(mayor)
        i = 0
        lista_total = []
        while len(lista) > 0:
            w = lista[0]
            age = w['Age']
            if resultado[i] == age:
                lista_total.append(lista[0])
                del lista[0]
            i = i + 1
        while len(lista_total) > 0:
            print('""""""""""""""""""""""""""""""""""""')
            for x,y in lista_total[0].items():
                print(x+":", y,"\n")
            del lista_total[0]
    elif order == 2:
        lista = sorted(lista, key=operator.itemgetter("Age"), reverse=True)
        resultado=[]
        while len(lista_age) > 0:
            mayor = min(lista_age)
            resultado.insert(0,mayor)
            lista_age.remove(mayor)
        i = 0
        lista_total = []
        while len(lista) > 0:
            w = lista[0]
            age = w['Age']
            if resultado[i] == age:
                lista_total.append(lista[0])
                del lista[0]
            i = i + 1
        while len(lista_total) > 0:
            print('""""""""""""""""""""""""""""""""""""')
            for x,y in lista_total[0].items():
                print(x+":", y,"\n")
            del lista_total[0]
   
    elif order == 3:
        lista =sorted(lista, key=operator.itemgetter("Name"))
        resultado=[]
        while len(lista_name) > 0:
            mayor = max(lista_name)
            resultado.insert(0,mayor)
            lista_name.remove(mayor)
        i = 0
        lista_total = []
        while len(lista) > 0:
            w = lista[0]
            age = w['Name']
            if resultado[i] == age:
                lista_total.append(lista[0])
                del lista[0]
            i = i + 1
        while len(lista_total) > 0:
            print('""""""""""""""""""""""""""""""""""""')
            for x,y in lista_total[0].items():
                print(x+":", y,"\n")
            del lista_total[0]   

    elif order == 4:
        lista =sorted(lista, key=operator.itemgetter("Name"), reverse=True)
        resultado=[]
        while len(lista_name) > 0:
            mayor = min(lista_name)
            resultado.insert(0,mayor)
            lista_name.remove(mayor)
        i = 0
        lista_total = []
        while len(lista) > 0:
            w = lista[0]
            age = w['Name']
            if resultado[i] == age:
                lista_total.append(lista[0])
                del lista[0]
            i = i + 1
        while len(lista_total) > 0:
            print('""""""""""""""""""""""""""""""""""""')
            for x,y in lista_total[0].items():
                print(x+":", y,"\n")
            del lista_total[0]   
    else:
        print("Digit entered out of range, please try again")
        return read_file()

"""The attributes function shows the attributes of a specific person"""
def attributes():
    """personas is a dictionary where the information that is extracted from the image is stored in specific keys."""
    personas = {'name': None, 'Attibutes': None, 'age': None, 'gender': None}
    print("Ingrese el Id del grupo:")
    group_id = input()
    print()
    print("Write the image address:")
    picture = str(input())
    print()
    response = CF.face.detect(picture)
    face_ids = [d['faceId'] for d in response]
    identified_faces = CF.face.identify(face_ids, group_id)
    personas = identified_faces[0]
    candidates_list = personas['candidates']
    candidates = candidates_list[0]
    person = candidates['personId']
    person_data = CF.person.get(group_id, person)
    person_name = person_data['name']
    personas['name'] = person_name
    print("The person's name is:", person_name)
    print()
    image_path = picture
    image_data = open(image_path, "rb").read()
    headers = {'Ocp-Apim-Subscription-Key': SUBSCRIPTION_KEY,
    'Content-Type': 'application/octet-stream'}
    params = {
        'returnFaceId': 'true',
        'returnFaceLandmarks': 'false',
        'returnFaceAttributes': 'age,gender,headPose,smile,facialHair,glasses,emotion,hair,makeup,occlusion,accessories,blur,exposure,noise',
    }
    response = requests.post(
                                BASE_URL + "detect/", headers=headers, params=params, data=image_data)
    analysis = response.json()
    print("The attributes of the faces are:")
    print()
    """By means of a loop the attributes of the people are shown and stored in a list"""
    for x in analysis:
        FaceAttributes = x["faceAttributes"]
        personas['Attributes'] = FaceAttributes
        Smile = FaceAttributes["smile"]
        print("Smile:", Smile, "\n")
        Headpose = FaceAttributes["headPose"]       
        pitch = Headpose["pitch"]
        roll = Headpose["roll"]
        yaw = Headpose["yaw"]
        print("HeadPose:")
        print("Pitch:", pitch, "|| Roll:", roll, "|| Yaw:", yaw, "\n")
        gender = FaceAttributes["gender"]
        personas['gender'] = gender
        print("Gender:", gender, "\n")
        age = FaceAttributes["age"]
        personas['age'] = age
        print("Age:", age, "\n")
        facialhair = FaceAttributes["facialHair"]
        moustache = facialhair["moustache"]
        beard = facialhair["beard"]
        sideburns = facialhair["sideburns"]
        print("Facialhair:")
        print("Moustache:", moustache, "|| Beard", beard, "|| Sideburns:", sideburns, "\n")
        glasses = FaceAttributes["glasses"]
        print("Glasses:", glasses, "\n")
        emotion = FaceAttributes["emotion"]
        anger = emotion["anger"]
        contempt = emotion["contempt"]
        disgust = emotion["disgust"]
        fear = emotion["fear"]
        happiness = emotion["happiness"]
        neutral = emotion["neutral"]
        sadness = emotion["sadness"]
        surprise = emotion["surprise"]
        print("Emotion:")
        print("Anger:", anger, "|| Contempt:", contempt, "|| Disgust:,", disgust, "|| Fear:", fear, "|| Happiness:", happiness, "|| Neutral:", neutral,"|| Sadness:", sadness, "|| Surprise:", surprise, "\n")
        blur = FaceAttributes["blur"]
        blurlevel = blur["blurLevel"]
        value = blur["value"]
        print("Blur:")
        print("Bluerlevel:", blurlevel, "|| Value", value, "\n")
        exposure = FaceAttributes["exposure"]
        exposureLevel = exposure["exposureLevel"]
        value = exposure["value"]
        print("Exposure:")
        print("Exposureluvel:", exposureLevel, "|| Value", value, "\n")
        noise = FaceAttributes["noise"]
        noiseLevel = noise["noiseLevel"]
        value = noise["value"]
        print("Noise:")
        print("NoiseLevel:", noiseLevel, "|| Value:", value, "\n")
        makeup = FaceAttributes["makeup"]
        eyeMakeup = makeup["eyeMakeup"]
        lipMakeup = makeup["lipMakeup"]
        print("Makeup:")
        print("EyeMakeup:", eyeMakeup, "|| LipMakeup:", lipMakeup, "\n")
        accessories = FaceAttributes["accessories"]
        print("Accessories:", accessories, "\n")
        occlusion = FaceAttributes["occlusion"]
        foreheadOccluded = occlusion["foreheadOccluded"]
        eyeOccluded = occlusion["eyeOccluded"]
        mouthOccluded = occlusion["mouthOccluded"]
        print("Occlusion:")
        print("Foreheadoccluded:", foreheadOccluded,"|| EyeOccluded:", eyeOccluded, "|| MouthOccluded:", mouthOccluded, "\n")
        hair = FaceAttributes["hair"]
        bald = hair["bald"]
        invisible = hair["invisible"]
        hairColor = hair["hairColor"]
        print("Hair:")
        print("Bald:", bald, "|| Invisible:", invisible, "|| Haircolor:", hairColor)
        historial.append(personas)

"""History is a function that shows the queries that have been made to the attributes of a person"""
def Historial():
    """The history is shown in order of name, age and gender"""
    if historial == []:
        print("No queries have been made")
    else:
        print('"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""')
        print("| Order menu:                                                 |")
        print("| Ascending order by name                         -> Scribe 1 |")
        print("| Descending order by name                        -> Scribe 2 |")
        print("| Ascending order by age                          -> Scribe 3 |")
        print("| Descending order by age                         -> Scribe 4 |")
        print("| Ascending order by gender                       -> Scribe 5 |")
        print("| Descending order by gender                      -> Scribe 6 |")
        print('"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""\n')
        digito = int(input())
        print()
        """The sorted method and python functions are used to facilitate ordering by specific key"""
        if digito == 1:
            for x in sorted(historial, key=operator.itemgetter('name')):
                name = x['name']
                print("The person's name is:", name, "\n")
                Attributes = x['Attributes']
                Smile = Attributes["smile"]
                print("Smile:", Smile, "\n")
                Headpose = Attributes["headPose"]       
                pitch = Headpose["pitch"]
                roll = Headpose["roll"]
                yaw = Headpose["yaw"]
                print("HeadPose:")
                print("Pitch:", pitch, "|| Roll:", roll, "|| Yaw:", yaw, "\n")
                gender = Attributes["gender"]
                print("Gender:", gender, "\n")
                age = Attributes["age"]
                print("Age:", age, "\n")
                facialhair = Attributes["facialHair"]
                moustache = facialhair["moustache"]
                beard = facialhair["beard"]
                sideburns = facialhair["sideburns"]
                print("Facialhair:")
                print("Moustache:", moustache, "|| Beard", beard, "|| Sideburns:", sideburns, "\n")
                glasses = Attributes["glasses"]
                print("Glasses:", glasses, "\n")
                emotion = Attributes["emotion"]
                anger = emotion["anger"]
                contempt = emotion["contempt"]
                disgust = emotion["disgust"]
                fear = emotion["fear"]
                happiness = emotion["happiness"]
                neutral = emotion["neutral"]
                sadness = emotion["sadness"]
                surprise = emotion["surprise"]
                print("Emotion:")
                print("Anger:", anger, "|| Contempt:", contempt, "|| Disgust:,", disgust, "|| Fear:", fear, "|| Happiness:", happiness, "|| Neutral:", neutral,"|| Sadness:", sadness, "|| Surprise:", surprise, "\n")
                blur = Attributes["blur"]
                blurlevel = blur["blurLevel"]
                value = blur["value"]
                print("Blur:")
                print("Bluerlevel:", blurlevel, "|| Value", value, "\n")
                exposure = Attributes["exposure"]
                exposureLevel = exposure["exposureLevel"]
                value = exposure["value"]
                print("Exposure:")
                print("Exposureluvel:", exposureLevel, "|| Value", value, "\n")
                noise = Attributes["noise"]
                noiseLevel = noise["noiseLevel"]
                value = noise["value"]
                print("Noise:")
                print("NoiseLevel:", noiseLevel, "|| Value:", value, "\n")
                makeup = Attributes["makeup"]
                eyeMakeup = makeup["eyeMakeup"]
                lipMakeup = makeup["lipMakeup"]
                print("Makeup:")
                print("EyeMakeup:", eyeMakeup, "|| LipMakeup:", lipMakeup, "\n")
                accessories = Attributes["accessories"]
                print("Accessories:", accessories, "\n")
                occlusion = Attributes["occlusion"]
                foreheadOccluded = occlusion["foreheadOccluded"]
                eyeOccluded = occlusion["eyeOccluded"]
                mouthOccluded = occlusion["mouthOccluded"]
                print("Occlusion:")
                print("Foreheadoccluded:", foreheadOccluded,"|| EyeOccluded:", eyeOccluded, "|| MouthOccluded:", mouthOccluded, "\n")
                hair = Attributes["hair"]
                bald = hair["bald"]
                invisible = hair["invisible"]
                hairColor = hair["hairColor"]
                print("Hair:")
                print("Bald:", bald, "|| Invisible:", invisible, "|| Haircolor:", hairColor, "\n")
        elif digito == 2:
            for x in sorted(historial, key=operator.itemgetter('name'), reverse=True):
                name = x['name']
                print("The person's name is:", name, "\n")
                Attributes = x['Attributes']
                Smile = Attributes["smile"]
                print("Smile:", Smile, "\n")
                Headpose = Attributes["headPose"]       
                pitch = Headpose["pitch"]
                roll = Headpose["roll"]
                yaw = Headpose["yaw"]
                print("HeadPose:")
                print("Pitch:", pitch, "|| Roll:", roll, "|| Yaw:", yaw, "\n")
                gender = Attributes["gender"]
                print("Gender:", gender, "\n")
                age = Attributes["age"]
                print("Age:", age, "\n")
                facialhair = Attributes["facialHair"]
                moustache = facialhair["moustache"]
                beard = facialhair["beard"]
                sideburns = facialhair["sideburns"]
                print("Facialhair:")
                print("Moustache:", moustache, "|| Beard", beard, "|| Sideburns:", sideburns, "\n")
                glasses = Attributes["glasses"]
                print("Glasses:", glasses, "\n")
                emotion = Attributes["emotion"]
                anger = emotion["anger"]
                contempt = emotion["contempt"]
                disgust = emotion["disgust"]
                fear = emotion["fear"]
                happiness = emotion["happiness"]
                neutral = emotion["neutral"]
                sadness = emotion["sadness"]
                surprise = emotion["surprise"]
                print("Emotion:")
                print("Anger:", anger, "|| Contempt:", contempt, "|| Disgust:,", disgust, "|| Fear:", fear, "|| Happiness:", happiness, "|| Neutral:", neutral,"|| Sadness:", sadness, "|| Surprise:", surprise, "\n")
                blur = Attributes["blur"]
                blurlevel = blur["blurLevel"]
                value = blur["value"]
                print("Blur:")
                print("Bluerlevel:", blurlevel, "|| Value", value, "\n")
                exposure = Attributes["exposure"]
                exposureLevel = exposure["exposureLevel"]
                value = exposure["value"]
                print("Exposure:")
                print("Exposureluvel:", exposureLevel, "|| Value", value, "\n")
                noise = Attributes["noise"]
                noiseLevel = noise["noiseLevel"]
                value = noise["value"]
                print("Noise:")
                print("NoiseLevel:", noiseLevel, "|| Value:", value, "\n")
                makeup = Attributes["makeup"]
                eyeMakeup = makeup["eyeMakeup"]
                lipMakeup = makeup["lipMakeup"]
                print("Makeup:")
                print("EyeMakeup:", eyeMakeup, "|| LipMakeup:", lipMakeup, "\n")
                accessories = Attributes["accessories"]
                print("Accessories:", accessories, "\n")
                occlusion = Attributes["occlusion"]
                foreheadOccluded = occlusion["foreheadOccluded"]
                eyeOccluded = occlusion["eyeOccluded"]
                mouthOccluded = occlusion["mouthOccluded"]
                print("Occlusion:")
                print("Foreheadoccluded:", foreheadOccluded,"|| EyeOccluded:", eyeOccluded, "|| MouthOccluded:", mouthOccluded, "\n")
                hair = Attributes["hair"]
                bald = hair["bald"]
                invisible = hair["invisible"]
                hairColor = hair["hairColor"]
                print("Hair:")
                print("Bald:", bald, "|| Invisible:", invisible, "|| Haircolor:", hairColor, "\n")

        elif digito == 3:
            for x in sorted(historial, key=operator.itemgetter('age')):
                name = x['name']
                print("The person's name is:", name, "\n")
                Attributes = x['Attributes']
                Smile = Attributes["smile"]
                print("Smile:", Smile, "\n")
                Headpose = Attributes["headPose"]       
                pitch = Headpose["pitch"]
                roll = Headpose["roll"]
                yaw = Headpose["yaw"]
                print("HeadPose:")
                print("Pitch:", pitch, "|| Roll:", roll, "|| Yaw:", yaw, "\n")
                gender = Attributes["gender"]
                print("Gender:", gender, "\n")
                age = Attributes["age"]
                print("Age:", age, "\n")
                facialhair = Attributes["facialHair"]
                moustache = facialhair["moustache"]
                beard = facialhair["beard"]
                sideburns = facialhair["sideburns"]
                print("Facialhair:")
                print("Moustache:", moustache, "|| Beard", beard, "|| Sideburns:", sideburns, "\n")
                glasses = Attributes["glasses"]
                print("Glasses:", glasses, "\n")
                emotion = Attributes["emotion"]
                anger = emotion["anger"]
                contempt = emotion["contempt"]
                disgust = emotion["disgust"]
                fear = emotion["fear"]
                happiness = emotion["happiness"]
                neutral = emotion["neutral"]
                sadness = emotion["sadness"]
                surprise = emotion["surprise"]
                print("Emotion:")
                print("Anger:", anger, "|| Contempt:", contempt, "|| Disgust:,", disgust, "|| Fear:", fear, "|| Happiness:", happiness, "|| Neutral:", neutral,"|| Sadness:", sadness, "|| Surprise:", surprise, "\n")
                blur = Attributes["blur"]
                blurlevel = blur["blurLevel"]
                value = blur["value"]
                print("Blur:")
                print("Bluerlevel:", blurlevel, "|| Value", value, "\n")
                exposure = Attributes["exposure"]
                exposureLevel = exposure["exposureLevel"]
                value = exposure["value"]
                print("Exposure:")
                print("Exposureluvel:", exposureLevel, "|| Value", value, "\n")
                noise = Attributes["noise"]
                noiseLevel = noise["noiseLevel"]
                value = noise["value"]
                print("Noise:")
                print("NoiseLevel:", noiseLevel, "|| Value:", value, "\n")
                makeup = Attributes["makeup"]
                eyeMakeup = makeup["eyeMakeup"]
                lipMakeup = makeup["lipMakeup"]
                print("Makeup:")
                print("EyeMakeup:", eyeMakeup, "|| LipMakeup:", lipMakeup, "\n")
                accessories = Attributes["accessories"]
                print("Accessories:", accessories, "\n")
                occlusion = Attributes["occlusion"]
                foreheadOccluded = occlusion["foreheadOccluded"]
                eyeOccluded = occlusion["eyeOccluded"]
                mouthOccluded = occlusion["mouthOccluded"]
                print("Occlusion:")
                print("Foreheadoccluded:", foreheadOccluded,"|| EyeOccluded:", eyeOccluded, "|| MouthOccluded:", mouthOccluded, "\n")
                hair = Attributes["hair"]
                bald = hair["bald"]
                invisible = hair["invisible"]
                hairColor = hair["hairColor"]
                print("Hair:")
                print("Bald:", bald, "|| Invisible:", invisible, "|| Haircolor:", hairColor, "\n")

        elif digito == 4:
            for x in sorted(historial, key=operator.itemgetter('age'), reverse=True):
                name = x['name']
                print("The person's name is:", name, "\n")
                Attributes = x['Attributes']
                Smile = Attributes["smile"]
                print("Smile:", Smile, "\n")
                Headpose = Attributes["headPose"]       
                pitch = Headpose["pitch"]
                roll = Headpose["roll"]
                yaw = Headpose["yaw"]
                print("HeadPose:")
                print("Pitch:", pitch, "|| Roll:", roll, "|| Yaw:", yaw, "\n")
                gender = Attributes["gender"]
                print("Gender:", gender, "\n")
                age = Attributes["age"]
                print("Age:", age, "\n")
                facialhair = Attributes["facialHair"]
                moustache = facialhair["moustache"]
                beard = facialhair["beard"]
                sideburns = facialhair["sideburns"]
                print("Facialhair:")
                print("Moustache:", moustache, "|| Beard", beard, "|| Sideburns:", sideburns, "\n")
                glasses = Attributes["glasses"]
                print("Glasses:", glasses, "\n")
                emotion = Attributes["emotion"]
                anger = emotion["anger"]
                contempt = emotion["contempt"]
                disgust = emotion["disgust"]
                fear = emotion["fear"]
                happiness = emotion["happiness"]
                neutral = emotion["neutral"]
                sadness = emotion["sadness"]
                surprise = emotion["surprise"]
                print("Emotion:")
                print("Anger:", anger, "|| Contempt:", contempt, "|| Disgust:,", disgust, "|| Fear:", fear, "|| Happiness:", happiness, "|| Neutral:", neutral,"|| Sadness:", sadness, "|| Surprise:", surprise, "\n")
                blur = Attributes["blur"]
                blurlevel = blur["blurLevel"]
                value = blur["value"]
                print("Blur:")
                print("Bluerlevel:", blurlevel, "|| Value", value, "\n")
                exposure = Attributes["exposure"]
                exposureLevel = exposure["exposureLevel"]
                value = exposure["value"]
                print("Exposure:")
                print("Exposureluvel:", exposureLevel, "|| Value", value, "\n")
                noise = Attributes["noise"]
                noiseLevel = noise["noiseLevel"]
                value = noise["value"]
                print("Noise:")
                print("NoiseLevel:", noiseLevel, "|| Value:", value, "\n")
                makeup = Attributes["makeup"]
                eyeMakeup = makeup["eyeMakeup"]
                lipMakeup = makeup["lipMakeup"]
                print("Makeup:")
                print("EyeMakeup:", eyeMakeup, "|| LipMakeup:", lipMakeup, "\n")
                accessories = Attributes["accessories"]
                print("Accessories:", accessories, "\n")
                occlusion = Attributes["occlusion"]
                foreheadOccluded = occlusion["foreheadOccluded"]
                eyeOccluded = occlusion["eyeOccluded"]
                mouthOccluded = occlusion["mouthOccluded"]
                print("Occlusion:")
                print("Foreheadoccluded:", foreheadOccluded,"|| EyeOccluded:", eyeOccluded, "|| MouthOccluded:", mouthOccluded, "\n")
                hair = Attributes["hair"]
                bald = hair["bald"]
                invisible = hair["invisible"]
                hairColor = hair["hairColor"]
                print("Hair:")
                print("Bald:", bald, "|| Invisible:", invisible, "|| Haircolor:", hairColor, "\n")

        elif digito == 5:
            for x in sorted(historial, key=operator.itemgetter('gender')):
                name = x['name']
                print("The person's name is:", name, "\n")
                Attributes = x['Attributes']
                Smile = Attributes["smile"]
                print("Smile:", Smile, "\n")
                Headpose = Attributes["headPose"]       
                pitch = Headpose["pitch"]
                roll = Headpose["roll"]
                yaw = Headpose["yaw"]
                print("HeadPose:")
                print("Pitch:", pitch, "|| Roll:", roll, "|| Yaw:", yaw, "\n")
                gender = Attributes["gender"]
                print("Gender:", gender, "\n")
                age = Attributes["age"]
                print("Age:", age, "\n")
                facialhair = Attributes["facialHair"]
                moustache = facialhair["moustache"]
                beard = facialhair["beard"]
                sideburns = facialhair["sideburns"]
                print("Facialhair:")
                print("Moustache:", moustache, "|| Beard", beard, "|| Sideburns:", sideburns, "\n")
                glasses = Attributes["glasses"]
                print("Glasses:", glasses, "\n")
                emotion = Attributes["emotion"]
                anger = emotion["anger"]
                contempt = emotion["contempt"]
                disgust = emotion["disgust"]
                fear = emotion["fear"]
                happiness = emotion["happiness"]
                neutral = emotion["neutral"]
                sadness = emotion["sadness"]
                surprise = emotion["surprise"]
                print("Emotion:")
                print("Anger:", anger, "|| Contempt:", contempt, "|| Disgust:,", disgust, "|| Fear:", fear, "|| Happiness:", happiness, "|| Neutral:", neutral,"|| Sadness:", sadness, "|| Surprise:", surprise, "\n")
                blur = Attributes["blur"]
                blurlevel = blur["blurLevel"]
                value = blur["value"]
                print("Blur:")
                print("Bluerlevel:", blurlevel, "|| Value", value, "\n")
                exposure = Attributes["exposure"]
                exposureLevel = exposure["exposureLevel"]
                value = exposure["value"]
                print("Exposure:")
                print("Exposureluvel:", exposureLevel, "|| Value", value, "\n")
                noise = Attributes["noise"]
                noiseLevel = noise["noiseLevel"]
                value = noise["value"]
                print("Noise:")
                print("NoiseLevel:", noiseLevel, "|| Value:", value, "\n")
                makeup = Attributes["makeup"]
                eyeMakeup = makeup["eyeMakeup"]
                lipMakeup = makeup["lipMakeup"]
                print("Makeup:")
                print("EyeMakeup:", eyeMakeup, "|| LipMakeup:", lipMakeup, "\n")
                accessories = Attributes["accessories"]
                print("Accessories:", accessories, "\n")
                occlusion = Attributes["occlusion"]
                foreheadOccluded = occlusion["foreheadOccluded"]
                eyeOccluded = occlusion["eyeOccluded"]
                mouthOccluded = occlusion["mouthOccluded"]
                print("Occlusion:")
                print("Foreheadoccluded:", foreheadOccluded,"|| EyeOccluded:", eyeOccluded, "|| MouthOccluded:", mouthOccluded, "\n")
                hair = Attributes["hair"]
                bald = hair["bald"]
                invisible = hair["invisible"]
                hairColor = hair["hairColor"]
                print("Hair:")
                print("Bald:", bald, "|| Invisible:", invisible, "|| Haircolor:", hairColor, "\n")

        elif digito == 6:
            for x in sorted(historial, key=operator.itemgetter('gender'), reverse=True):
                name = x['name']
                print("The person's name is:", name, "\n")
                Attributes = x['Attributes']
                Smile = Attributes["smile"]
                print("Smile:", Smile, "\n")
                Headpose = Attributes["headPose"]       
                pitch = Headpose["pitch"]
                roll = Headpose["roll"]
                yaw = Headpose["yaw"]
                print("HeadPose:")
                print("Pitch:", pitch, "|| Roll:", roll, "|| Yaw:", yaw, "\n")
                gender = Attributes["gender"]
                print("Gender:", gender, "\n")
                age = Attributes["age"]
                print("Age:", age, "\n")
                facialhair = Attributes["facialHair"]
                moustache = facialhair["moustache"]
                beard = facialhair["beard"]
                sideburns = facialhair["sideburns"]
                print("Facialhair:")
                print("Moustache:", moustache, "|| Beard", beard, "|| Sideburns:", sideburns, "\n")
                glasses = Attributes["glasses"]
                print("Glasses:", glasses, "\n")
                emotion = Attributes["emotion"]
                anger = emotion["anger"]
                contempt = emotion["contempt"]
                disgust = emotion["disgust"]
                fear = emotion["fear"]
                happiness = emotion["happiness"]
                neutral = emotion["neutral"]
                sadness = emotion["sadness"]
                surprise = emotion["surprise"]
                print("Emotion:")
                print("Anger:", anger, "|| Contempt:", contempt, "|| Disgust:,", disgust, "|| Fear:", fear, "|| Happiness:", happiness, "|| Neutral:", neutral,"|| Sadness:", sadness, "|| Surprise:", surprise, "\n")
                blur = Attributes["blur"]
                blurlevel = blur["blurLevel"]
                value = blur["value"]
                print("Blur:")
                print("Bluerlevel:", blurlevel, "|| Value", value, "\n")
                exposure = Attributes["exposure"]
                exposureLevel = exposure["exposureLevel"]
                value = exposure["value"]
                print("Exposure:")
                print("Exposureluvel:", exposureLevel, "|| Value", value, "\n")
                noise = Attributes["noise"]
                noiseLevel = noise["noiseLevel"]
                value = noise["value"]
                print("Noise:")
                print("NoiseLevel:", noiseLevel, "|| Value:", value, "\n")
                makeup = Attributes["makeup"]
                eyeMakeup = makeup["eyeMakeup"]
                lipMakeup = makeup["lipMakeup"]
                print("Makeup:")
                print("EyeMakeup:", eyeMakeup, "|| LipMakeup:", lipMakeup, "\n")
                accessories = Attributes["accessories"]
                print("Accessories:", accessories, "\n")
                occlusion = Attributes["occlusion"]
                foreheadOccluded = occlusion["foreheadOccluded"]
                eyeOccluded = occlusion["eyeOccluded"]
                mouthOccluded = occlusion["mouthOccluded"]
                print("Occlusion:")
                print("Foreheadoccluded:", foreheadOccluded,"|| EyeOccluded:", eyeOccluded, "|| MouthOccluded:", mouthOccluded, "\n")
                hair = Attributes["hair"]
                bald = hair["bald"]
                invisible = hair["invisible"]
                hairColor = hair["hairColor"]
                print("Hair:")
                print("Bald:", bald, "|| Invisible:", invisible, "|| Haircolor:", hairColor, "\n")
        else:
            print("Digit out of range, re-enter digit\n")
            Historial()

"""The Characteristics function shows the characteristics of a person given an image"""
def Characteristics():
    """The image address is requested to extract the requested information"""
    print("Write the image address:")
    picture = str(input())
    print()
    image_path = picture
    image_data = open(image_path, "rb").read()
    headers = {'Ocp-Apim-Subscription-Key': SUBSCRIPTION_KEY,
    'Content-Type': 'application/octet-stream'}
    params = {
        'returnFaceId': 'true',
        'returnFaceLandmarks': 'false',
        'returnFaceAttributes': 'age,gender,headPose,smile,facialHair,glasses,emotion,hair,makeup,occlusion,accessories,blur,exposure,noise',
    }
    response = requests.post(
                                BASE_URL + "detect/", headers=headers, params=params, data=image_data)
    analysis = response.json()
    list1 = analysis
    pos = list1[0]
    faceRentangle = pos["faceRectangle"]
    print("The characteristics of the image are:")
    for x, w in faceRentangle.items():  
        print(x+":", w)

"""The Facial_features function displays the facial features of a person given an image that receives"""
def Facial_features():
    """The image address is requested to extract the requested information"""
    print("Write the image address:")
    picture = str(input())
    print()
    image_path = picture
    image_data = open(image_path, "rb").read()
    headers = {'Ocp-Apim-Subscription-Key': SUBSCRIPTION_KEY,
    'Content-Type': 'application/octet-stream'}
    params = {
        'returnFaceId': 'true',
        'returnFaceLandmarks': 'false',
        'returnFaceAttributes': 'age,gender,headPose,smile,facialHair,glasses,emotion,hair,makeup,occlusion,accessories,blur,exposure,noise',
    }
    response = requests.post(
                                BASE_URL + "detect/", headers=headers, params=params, data=image_data)
    analysis = response.json()
    list2 = analysis
    ras = list2[0]
    print("The facial features are:")
    faceRectangle = ras["faceAttributes"]
    gender = faceRectangle["gender"]
    age = faceRectangle["age"]
    print("The age is:", age)
    print("The gender is:", gender)
    ha = faceRectangle["facialHair"]
    for x, y in ha.items():
        print(x+":", y)

"""The Hair_color function shows the hair color of a person given an image"""
def Hair_color():   
    """The image address is requested to extract the requested information"""
    print("Write the image address:")
    picture = str(input())
    image_path = picture
    image_data = open(image_path, "rb").read()
    headers = {'Ocp-Apim-Subscription-Key': SUBSCRIPTION_KEY,
    'Content-Type': 'application/octet-stream'}
    params = {
        'returnFaceId': 'true',
        'returnFaceLandmarks': 'false',
        'returnFaceAttributes': 'age,gender,headPose,smile,facialHair,glasses,emotion,hair,makeup,occlusion,accessories,blur,exposure,noise',
    }
    response = requests.post(
                                BASE_URL + "detect/", headers=headers, params=params, data=image_data)
    analysis = response.json()
    print()
    print("The hair color will be shown in the following parameters:")

    cabello_lista = analysis
    for x in cabello_lista:
        faceAttributes = x["faceAttributes"]
        hair = faceAttributes["hair"]
        pelon = hair["invisible"]
        if pelon == False:
            print()
        else:
            print("The person is bald")
        blond = hair["bald"]
        print("bald:", blond)
        hairColor = hair["hairColor"]
        for e in hairColor:
            print(e)

""""" "The emotions_items function shows people's emotions in parameters given an image"""
def emotions_items():
    """The image address is requested to extract the requested information"""
    print("Write the image address:")
    picture = str(input())
    image_path = picture
    image_data = open(image_path, "rb").read()
    headers = {'Ocp-Apim-Subscription-Key': SUBSCRIPTION_KEY,
    'Content-Type': 'application/octet-stream'}
    params = {
        'returnFaceId': 'true',
        'returnFaceLandmarks': 'false',
        'returnFaceAttributes': 'age,gender,headPose,smile,facialHair,glasses,emotion,hair,makeup,occlusion,accessories,blur,exposure,noise',
    }
    response = requests.post(
                                BASE_URL + "detect/", headers=headers, params=params, data=image_data)
    analysis = response.json()
    print()
    print("Emotions will be shown in the following parameters:")

    cabello_lista = analysis
    for x in cabello_lista:
        faceAttributes = x["faceAttributes"]
        emo = faceAttributes["emotion"]
        for y, w in emo.items():
            print(y+":", w)

""""" "The accessories function shows if the person is wearing some type of accessory given an image"""
def accessories():
    """The image address is requested to extract the requested information"""
    print("Write the address of the image: ")
    picture = str(input())
    image_path = picture
    image_data = open(image_path, "rb").read()
    headers = {'Ocp-Apim-Subscription-Key': SUBSCRIPTION_KEY,
    'Content-Type': 'application/octet-stream'}
    params = {
        'returnFaceId': 'true',
        'returnFaceLandmarks': 'false',
        'returnFaceAttributes': 'age,gender,headPose,smile,facialHair,glasses,emotion,hair,makeup,occlusion,accessories,blur,exposure,noise',
    }
    response = requests.post(
                                BASE_URL + "detect/", headers=headers, params=params, data=image_data)
    analysis = response.json()
    print()
    print("Accessories will be shown below:")

    accesorios_lista = analysis
    for x in accesorios_lista:
        faceAttributes = x["faceAttributes"]
        r = faceAttributes["accessories"]
        if r == []:
            print("No accessories")
        else:
            for e in r:
                for t, u in e.items():
                    print(t+":", u)

"""The delete function removes a person from a specific group
    Arguments: Group_id: The group_id is entered by the user which is where the person to delete will be searched"""
def delete(group_id):
    person_group_id = group_id
    print()
    print('Enter the ID of the person to delete, if you do not know the ID of the person, type', "'return'", 'to return to the menu and check the people that exist in a group and copy the ID of the person you want to delete.')
    person_id = input()
    print()
    if person_id != "return":
        url = 'persongroups/{}/persons/{}'.format(person_group_id, person_id)
        return CF.util.request("DELETE", url)
    else:
        print()
        menu()

"""The menu function shows a menu where the rest of the code's functions are requested."""
def menu():
    print('""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""')
    print("| Option menu:                                                             |")
    print("| Create a group                                              -> Scribe 1  |")
    print("| Create a person in a group                                  -> Scribe 2  |")
    print("| Show the image with a box on the face                       -> Scribe 3  |")
    print("| Remove a person from a specific group                       -> Scribe 4  |")
    print("| Consult the attributes of a person given an image           -> Scribe 5  |")
    print("| Consult existing people in a group                          -> Scribe 6  |")
    print("| Consult people by name and age                              -> Scribe 7  |")
    print("| Check if a person's name exists in a group                  -> scribe 8  |")
    print("| Show all people by gender                                   -> Scribe 9  |")
    print("| Consult the characteristics of an image                     -> Scribe 10 |")
    print("| Check a person's facial features                            -> Scribe 11 |")
    print("| Consult the hair color given an image                       -> Scribe 12 |")
    print("| Consult the emotions of a person give a picture             -> Scribe 13 |")
    print("| Consult the accessories that a person wears given an image  -> Scribe 14 |")
    print("| Consult the history of consultations                        -> Scribe 15 |")
    print('""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""\n')
    print("Scribe the option to perform")
    Solicitud = int(input())   
    print()

    if Solicitud == 1:    
        print("Enter the group ID:")
        group_id = int(input())   
        print()
        print("Write the group name:")
        group_name = str(input())    
        print()
        """Call the create_group function"""
        create_group(group_id, group_name)   
        print()
        print("If you wish to carry out another action, enter 1, if you do not enter any number:")
        x = int(input())     
        if x == 1:
            """returns the menu function"""
            return menu()  
        else:
            print()
            print("Thanks for using the system")

    elif Solicitud == 2: 
        print("Enter an identify number")
        iden = int(input())
        print()
        print("Write the person's name:")
        name = str(input())   
        print()
        print("Write the name of the profession (it can only be: Student, Professor or Administrative):")
        profession = input() 
        print()
        print("Write the image address:")
        picture = str(input())  
        print()
        print("Enter the Id of the group you want to add the person to:")
        group_id = int(input())   
        print()
        """When creating a person, the profession is compared to ask the respective questions of each class."""
        if profession == 'Estudiante' or profession == 'estudiante' or profession == 'Student' or profession == 'student':
            print("Has a scholarship: Yes or No")
            scholarship = input()
            print()
            print("Which race are you studying?")
            career = input()
            print()
            print("Total number of credits you enrolled:")
            number_of_credits = input()
            print()
            """Call the create_person function"""
            create_person(iden, name, profession, picture, group_id, scholarship, career, number_of_credits)
            print()
            print("If you wish to carry out another action, enter 1, if you do not enter any number:")
            x = int(input())      
            if x == 1:
                """returns the menu function"""
                return menu()   
            else: 
                print()
                print("Thanks for using the system")

        elif profession == 'Profesor' or profession == 'profesor' or profession == 'Teacher' or profession == 'teacher' or profession == 'Professor' or profession == 'professor':
            print("What is the subject you teach?")
            matter = input()
            print()
            print("In which classroom do you teach?")
            classroom = input()
            print()
            print("How many days a week do you work?")
            business_days = input()
            print()
            """Call the create_person function"""
            create_person(iden, name, profession, picture, group_id, matter, classroom, business_days)
            print()
            print("If you wish to carry out another action, enter 1, if you do not enter any number:")
            x = int(input())      
            if x == 1:
                """returns the menu function"""
                return menu()   
            else: 
                print()
                print("Thanks for using the system")
        elif profession == 'Administrative' or profession == 'administrative' or profession == 'Administrativo' or profession == 'administrativo':
            print("Company you work for?")
            where_you_work = input()
            print()
            print("What job position do you carry out?")
            work_position = input()
            print()
            print("Work experience (Enter it in years)?:")
            work_experience = input()
            print()
            """Call the create_person function"""
            create_person(iden, name, profession, picture, group_id, where_you_work, work_position, work_experience)
            print()
            print("If you wish to carry out another action, enter 1, if you do not enter any number:")
            x = int(input())      
            if x == 1:
                """returns the menu function"""
                return menu()   
            else: 
                print()
                print("Thanks for using the system")

    elif Solicitud == 3:    
        print("Write the image address:")
        picture = str(input())   
        print()
        print("Enter the group ID:")
        group_id = int(input())    
        print()
        """Call the recognize_person function"""
        recognize_person(picture, group_id)
        """Call the recognize_person1 function"""
        recognize_person1()
        print()
        print("If you wish to carry out another action, enter 1, if you do not enter any number:")
        x = int(input())      
        if x == 1:
            """returns the menu function"""
            return menu()    
        else:
            print()
            print("Thanks for using the system")

    elif Solicitud == 4:
        print("Enter the group ID")
        group_id = str(input()) 
        """Call the delete function"""   
        delete(group_id)  
        print("Deleted person")
        print()
        print("If you wish to carry out another action, enter 1, if you do not enter any number:")
        x = int(input())   
        print()
        if x == 1:
            """returns the menu function"""
            return menu()   
        else:
            print()
            print("Thanks for using the system")

    elif Solicitud == 5:
        """Call the attributes function"""
        attributes()
        print()
        print("If you wish to carry out another action, enter 1, if you do not enter any number:")
        x = int(input())  
        print()
        if x == 1:
            """returns the menu function"""
            return menu()    
        else:
            print()
            print("Thanks for using the system")

    elif Solicitud == 6:
        """Call the print_people function"""
        print_people() 
        print()
        print("If you wish to carry out another action, enter 1, if you do not enter any number:")
        x = int(input())    
        if x == 1:
            """returns the menu function"""
            return menu()    
        else:
            print()
            print("Thanks for using the system")

    elif Solicitud == 7:
        """Call the read_file function"""
        read_file()
        print()
        print("If you wish to carry out another action, enter 1, if you do not enter any number:")
        x = int(input())    
        if x == 1:
            """returns the menu function"""
            return menu()    
        else:
            print()
            print("Thanks for using the system")

    elif Solicitud == 8:
        print("Enter the name of the person to search:")
        name = input()
        print()
        print("Enter the name of the group where the person is to be searched:")
        group = input()
        print()
        """Call the Search_by_name function"""
        Search_by_name(name, group)
        print()
        print("If you wish to carry out another action, enter 1, if you do not enter any number:")
        x = int(input())  
        print()
        if x == 1:
            """returns the menu function"""
            return menu()    
        else:
            print()
            print("Thanks for using the system")

    elif Solicitud == 9:
        print("Enter the group ID")
        group_id = int(input())
        print()
        """Call the gender function"""
        gender(group_id)
        print()
        print("If you wish to carry out another action, enter 1, if you do not enter any number:")
        x = int(input())     
        print()
        if x == 1:
            """returns the menu function"""
            return menu()     
        else:
            print()
            print("Thanks for using the system")

    elif Solicitud == 10:
        """Call the Characteristics function""" 
        Characteristics()  
        print()
        print("If you wish to carry out another action, enter 1, if you do not enter any number:")
        x = int(input())     
        print()
        if x == 1:
            """returns the menu function"""
            return menu()     
        else:
            print()
            print("Thanks for using the system")

    elif Solicitud == 11:
        """Call the Facial_features function"""
        Facial_features()  
        print()
        print("If you wish to carry out another action, enter 1, if you do not enter any number:")
        x = int(input())  
        print()
        if x == 1:
            """returns the menu function"""
            return menu()    
        else:
            print()
            print("Thanks for using the system")

    elif Solicitud == 12:
        """Call the  function"""
        Hair_color()   
        print()
        print("If you wish to carry out another action, enter 1, if you do not enter any number:")
        x = int(input())    
        print()  
        if x == 1:
            """returns the menu function"""
            return menu()     
        else:
            print()
            print("Thanks for using the system")

    elif Solicitud == 13:
        """Call the emotions_items function"""
        emotions_items()  
        print()
        print("If you wish to carry out another action, enter 1, if you do not enter any number:")
        x = int(input())     
        print()
        if x == 1:
            """returns the menu function"""
            return menu()    
        else:
            print()
            print("Thanks for using the system")

    elif Solicitud == 14:
        """Call the accessories function"""
        accessories()   
        print()
        print("If you wish to carry out another action, enter 1, if you do not enter any number:")
        x = int(input())      
        if x == 1:
            """returns the menu function"""
            return menu()    
        else: 
            print()
            print("Thanks for using the system")

    elif Solicitud == 15:
        """Call the Historial function"""
        Historial()
        print()
        print("If you wish to carry out another action, enter 1, if you do not enter any number:")
        x = int(input())  
        print()
        if x == 1:
            """returns the menu function"""
            return menu()    
        else:
            print()
            print("Thanks for using the system")

    else:
        print("Error entering the digit please try again")
        print()
        """returns the menu function"""
        return menu()    

"""To call the functions"""
if __name__ == "__main__":
    print()
    print("Welcome to the facial recognition system")
    print()
    """Call the menu function"""
    menu()   


#Groups created
#432
#C:\Users\Armando\Pictures\Imagen1.jpg
#C:\Users\Armando\Pictures\Imagen2.jpg